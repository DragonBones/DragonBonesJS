{"version":3,"file":"BlurFilterPass.mjs","sources":["../src/BlurFilterPass.ts"],"sourcesContent":["import { CLEAR_MODES, Filter } from '@pixi/core';\nimport { generateBlurFragSource } from './generateBlurFragSource';\nimport { generateBlurVertSource } from './generateBlurVertSource';\n\nimport type { FilterSystem, RenderTexture } from '@pixi/core';\n\n/**\n * The BlurFilterPass applies a horizontal or vertical Gaussian blur to an object.\n * @memberof PIXI\n */\nexport class BlurFilterPass extends Filter\n{\n    public horizontal: boolean;\n    public strength!: number;\n    public passes!: number;\n\n    private _quality: number;\n\n    /**\n     * @param horizontal - Do pass along the x-axis (`true`) or y-axis (`false`).\n     * @param strength - The strength of the blur filter.\n     * @param quality - The quality of the blur filter.\n     * @param {number|null} [resolution=PIXI.Filter.defaultResolution] - The resolution of the blur filter.\n     * @param kernelSize - The kernelSize of the blur filter.Options: 5, 7, 9, 11, 13, 15.\n     */\n    constructor(horizontal: boolean, strength = 8, quality = 4, resolution = Filter.defaultResolution, kernelSize = 5)\n    {\n        const vertSrc = generateBlurVertSource(kernelSize, horizontal);\n        const fragSrc = generateBlurFragSource(kernelSize);\n\n        super(\n            // vertex shader\n            vertSrc,\n            // fragment shader\n            fragSrc\n        );\n\n        this.horizontal = horizontal;\n\n        this.resolution = resolution;\n\n        this._quality = 0;\n\n        this.quality = quality;\n\n        this.blur = strength;\n    }\n\n    /**\n     * Applies the filter.\n     * @param filterManager - The manager.\n     * @param input - The input target.\n     * @param output - The output target.\n     * @param clearMode - How to clear\n     */\n    public apply(\n        filterManager: FilterSystem, input: RenderTexture, output: RenderTexture, clearMode: CLEAR_MODES\n    ): void\n    {\n        if (output)\n        {\n            if (this.horizontal)\n            {\n                this.uniforms.strength = (1 / output.width) * (output.width / input.width);\n            }\n            else\n            {\n                this.uniforms.strength = (1 / output.height) * (output.height / input.height);\n            }\n        }\n        else\n        {\n            if (this.horizontal) // eslint-disable-line\n            {\n                this.uniforms.strength = (1 / filterManager.renderer.width) * (filterManager.renderer.width / input.width);\n            }\n            else\n            {\n                this.uniforms.strength = (1 / filterManager.renderer.height) * (filterManager.renderer.height / input.height); // eslint-disable-line\n            }\n        }\n\n        // screen space!\n        this.uniforms.strength *= this.strength;\n        this.uniforms.strength /= this.passes;\n\n        if (this.passes === 1)\n        {\n            filterManager.applyFilter(this, input, output, clearMode);\n        }\n        else\n        {\n            const renderTarget = filterManager.getFilterTexture();\n            const renderer = filterManager.renderer;\n\n            let flip = input;\n            let flop = renderTarget;\n\n            this.state.blend = false;\n            filterManager.applyFilter(this, flip, flop, CLEAR_MODES.CLEAR);\n\n            for (let i = 1; i < this.passes - 1; i++)\n            {\n                filterManager.bindAndClear(flip, CLEAR_MODES.BLIT);\n\n                this.uniforms.uSampler = flop;\n\n                const temp = flop;\n\n                flop = flip;\n                flip = temp;\n\n                renderer.shader.bind(this);\n                renderer.geometry.draw(5);\n            }\n\n            this.state.blend = true;\n            filterManager.applyFilter(this, flop, output, clearMode);\n            filterManager.returnFilterTexture(renderTarget);\n        }\n    }\n    /**\n     * Sets the strength of both the blur.\n     * @default 16\n     */\n    get blur(): number\n    {\n        return this.strength;\n    }\n\n    set blur(value: number)\n    {\n        this.padding = 1 + (Math.abs(value) * 2);\n        this.strength = value;\n    }\n\n    /**\n     * Sets the quality of the blur by modifying the number of passes. More passes means higher\n     * quality bluring but the lower the performance.\n     * @default 4\n     */\n    get quality(): number\n    {\n        return this._quality;\n    }\n\n    set quality(value: number)\n    {\n        this._quality = value;\n        this.passes = value;\n    }\n}\n"],"names":[],"mappings":";;;AAUO,MAAM,uBAAuB,OACpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcI,YAAY,YAAqB,WAAW,GAAG,UAAU,GAAG,aAAa,OAAO,mBAAmB,aAAa,GAChH;AACI,UAAM,UAAU,uBAAuB,YAAY,UAAU,GACvD,UAAU,uBAAuB,UAAU;AAEjD;AAAA;AAAA,MAEI;AAAA;AAAA,MAEA;AAAA,IAAA,GAGJ,KAAK,aAAa,YAElB,KAAK,aAAa,YAElB,KAAK,WAAW,GAEhB,KAAK,UAAU,SAEf,KAAK,OAAO;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASO,MACH,eAA6B,OAAsB,QAAuB,WAE9E;AA4BI,QA3BI,SAEI,KAAK,aAEL,KAAK,SAAS,WAAY,IAAI,OAAO,SAAU,OAAO,QAAQ,MAAM,SAIpE,KAAK,SAAS,WAAY,IAAI,OAAO,UAAW,OAAO,SAAS,MAAM,UAKtE,KAAK,aAEL,KAAK,SAAS,WAAY,IAAI,cAAc,SAAS,SAAU,cAAc,SAAS,QAAQ,MAAM,SAIpG,KAAK,SAAS,WAAY,IAAI,cAAc,SAAS,UAAW,cAAc,SAAS,SAAS,MAAM,SAK9G,KAAK,SAAS,YAAY,KAAK,UAC/B,KAAK,SAAS,YAAY,KAAK,QAE3B,KAAK,WAAW;AAEhB,oBAAc,YAAY,MAAM,OAAO,QAAQ,SAAS;AAAA,SAG5D;AACI,YAAM,eAAe,cAAc,iBAAiB,GAC9C,WAAW,cAAc;AAE3B,UAAA,OAAO,OACP,OAAO;AAEN,WAAA,MAAM,QAAQ,IACnB,cAAc,YAAY,MAAM,MAAM,MAAM,YAAY,KAAK;AAE7D,eAAS,IAAI,GAAG,IAAI,KAAK,SAAS,GAAG,KACrC;AACI,sBAAc,aAAa,MAAM,YAAY,IAAI,GAEjD,KAAK,SAAS,WAAW;AAEzB,cAAM,OAAO;AAEN,eAAA,MACP,OAAO,MAEP,SAAS,OAAO,KAAK,IAAI,GACzB,SAAS,SAAS,KAAK,CAAC;AAAA,MAC5B;AAEA,WAAK,MAAM,QAAQ,IACnB,cAAc,YAAY,MAAM,MAAM,QAAQ,SAAS,GACvD,cAAc,oBAAoB,YAAY;AAAA,IAClD;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,OACJ;AACI,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,IAAI,KAAK,OACT;AACS,SAAA,UAAU,IAAK,KAAK,IAAI,KAAK,IAAI,GACtC,KAAK,WAAW;AAAA,EACpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,UACJ;AACI,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,IAAI,QAAQ,OACZ;AACS,SAAA,WAAW,OAChB,KAAK,SAAS;AAAA,EAClB;AACJ;"}