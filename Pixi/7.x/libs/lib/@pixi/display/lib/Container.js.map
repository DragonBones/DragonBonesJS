{"version":3,"file":"Container.js","sources":["../src/Container.ts"],"sourcesContent":["import { MASK_TYPES, Matrix, utils } from '@pixi/core';\nimport { DisplayObject } from './DisplayObject';\n\nimport type { MaskData, Rectangle, Renderer } from '@pixi/core';\nimport type { IDestroyOptions } from './DisplayObject';\n\nconst tempMatrix = new Matrix();\n\nfunction sortChildren(a: DisplayObject, b: DisplayObject): number\n{\n    if (a.zIndex === b.zIndex)\n    {\n        return a._lastSortedIndex - b._lastSortedIndex;\n    }\n\n    return a.zIndex - b.zIndex;\n}\n\nexport interface Container extends GlobalMixins.Container, DisplayObject {}\n\n/**\n * Container is a general-purpose display object that holds children. It also adds built-in support for advanced\n * rendering features like masking and filtering.\n *\n * It is the base class of all display objects that act as a container for other objects, including Graphics\n * and Sprite.\n * @example\n * import { BlurFilter, Container, Graphics, Sprite } from 'pixi.js';\n *\n * const container = new Container();\n * const sprite = Sprite.from('https://s3-us-west-2.amazonaws.com/s.cdpn.io/693612/IaUrttj.png');\n *\n * sprite.width = 512;\n * sprite.height = 512;\n *\n * // Adds a sprite as a child to this container. As a result, the sprite will be rendered whenever the container\n * // is rendered.\n * container.addChild(sprite);\n *\n * // Blurs whatever is rendered by the container\n * container.filters = [new BlurFilter()];\n *\n * // Only the contents within a circle at the center should be rendered onto the screen.\n * container.mask = new Graphics()\n *     .beginFill(0xffffff)\n *     .drawCircle(sprite.width / 2, sprite.height / 2, Math.min(sprite.width, sprite.height) / 2)\n *     .endFill();\n * @memberof PIXI\n */\nexport class Container<T extends DisplayObject = DisplayObject> extends DisplayObject\n{\n    /**\n     * Sets the default value for the container property `sortableChildren`.\n     * If set to true, the container will sort its children by zIndex value\n     * when `updateTransform()` is called, or manually if `sortChildren()` is called.\n     *\n     * This actually changes the order of elements in the array, so should be treated\n     * as a basic solution that is not performant compared to other solutions,\n     * such as {@link https://github.com/pixijs/layers PixiJS Layers}.\n     *\n     * Also be aware of that this may not work nicely with the `addChildAt()` function,\n     * as the `zIndex` sorting may cause the child to automatically sorted to another position.\n     * @static\n     */\n    public static defaultSortableChildren = false;\n\n    /**\n     * The array of children of this container.\n     * @readonly\n     */\n    public readonly children: T[];\n\n    /**\n     * If set to true, the container will sort its children by `zIndex` value\n     * when `updateTransform()` is called, or manually if `sortChildren()` is called.\n     *\n     * This actually changes the order of elements in the array, so should be treated\n     * as a basic solution that is not performant compared to other solutions,\n     * such as {@link https://github.com/pixijs/layers PixiJS Layers}\n     *\n     * Also be aware of that this may not work nicely with the `addChildAt()` function,\n     * as the `zIndex` sorting may cause the child to automatically sorted to another position.\n     * @see PIXI.Container.defaultSortableChildren\n     */\n    public sortableChildren: boolean;\n\n    /**\n     * Should children be sorted by zIndex at the next updateTransform call.\n     *\n     * Will get automatically set to true if a new child is added, or if a child's zIndex changes.\n     */\n    public sortDirty: boolean;\n    public parent: Container;\n    public containerUpdateTransform: () => void;\n\n    protected _width: number;\n    protected _height: number;\n\n    constructor()\n    {\n        super();\n\n        this.children = [];\n        this.sortableChildren = Container.defaultSortableChildren;\n        this.sortDirty = false;\n\n        /**\n         * Fired when a DisplayObject is added to this Container.\n         * @event PIXI.Container#childAdded\n         * @param {PIXI.DisplayObject} child - The child added to the Container.\n         * @param {PIXI.Container} container - The container that added the child.\n         * @param {number} index - The children's index of the added child.\n         */\n\n        /**\n         * Fired when a DisplayObject is removed from this Container.\n         * @event PIXI.Container#childRemoved\n         * @param {PIXI.DisplayObject} child - The child removed from the Container.\n         * @param {PIXI.Container} container - The container that removed the child.\n         * @param {number} index - The former children's index of the removed child.\n         */\n    }\n\n    /**\n     * Overridable method that can be used by Container subclasses whenever the children array is modified.\n     * @param _length\n     */\n    protected onChildrenChange(_length?: number): void\n    {\n        /* empty */\n    }\n\n    /**\n     * Adds one or more children to the container.\n     *\n     * Multiple items can be added like so: `myContainer.addChild(thingOne, thingTwo, thingThree)`\n     * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to add to the container\n     * @returns {PIXI.DisplayObject} - The first child that was added.\n     */\n    addChild<U extends T[]>(...children: U): U[0]\n    {\n        // if there is only one argument we can bypass looping through the them\n        if (children.length > 1)\n        {\n            // loop through the array and add all children\n            for (let i = 0; i < children.length; i++)\n            {\n                // eslint-disable-next-line prefer-rest-params\n                this.addChild(children[i]);\n            }\n        }\n        else\n        {\n            const child = children[0];\n            // if the child has a parent then lets remove it as PixiJS objects can only exist in one place\n\n            if (child.parent)\n            {\n                child.parent.removeChild(child);\n            }\n\n            child.parent = this;\n            this.sortDirty = true;\n\n            // ensure child transform will be recalculated\n            child.transform._parentID = -1;\n\n            this.children.push(child);\n\n            // ensure bounds will be recalculated\n            this._boundsID++;\n\n            // TODO - lets either do all callbacks or all events.. not both!\n            this.onChildrenChange(this.children.length - 1);\n            this.emit('childAdded', child, this, this.children.length - 1);\n            child.emit('added', this);\n        }\n\n        return children[0];\n    }\n\n    /**\n     * Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown.\n     * If the child is already in this container, it will be moved to the specified index.\n     * @param {PIXI.DisplayObject} child - The child to add.\n     * @param {number} index - The absolute index where the child will be positioned at the end of the operation.\n     * @returns {PIXI.DisplayObject} The child that was added.\n     */\n    addChildAt<U extends T>(child: U, index: number): U\n    {\n        if (index < 0 || index > this.children.length)\n        {\n            throw new Error(`${child}addChildAt: The index ${index} supplied is out of bounds ${this.children.length}`);\n        }\n\n        if (child.parent)\n        {\n            child.parent.removeChild(child);\n        }\n\n        child.parent = this;\n        this.sortDirty = true;\n\n        // ensure child transform will be recalculated\n        child.transform._parentID = -1;\n\n        this.children.splice(index, 0, child);\n\n        // ensure bounds will be recalculated\n        this._boundsID++;\n\n        // TODO - lets either do all callbacks or all events.. not both!\n        this.onChildrenChange(index);\n        child.emit('added', this);\n        this.emit('childAdded', child, this, index);\n\n        return child;\n    }\n\n    /**\n     * Swaps the position of 2 Display Objects within this container.\n     * @param child - First display object to swap\n     * @param child2 - Second display object to swap\n     */\n    swapChildren(child: T, child2: T): void\n    {\n        if (child === child2)\n        {\n            return;\n        }\n\n        const index1 = this.getChildIndex(child);\n        const index2 = this.getChildIndex(child2);\n\n        this.children[index1] = child2;\n        this.children[index2] = child;\n        this.onChildrenChange(index1 < index2 ? index1 : index2);\n    }\n\n    /**\n     * Returns the index position of a child DisplayObject instance\n     * @param child - The DisplayObject instance to identify\n     * @returns - The index position of the child display object to identify\n     */\n    getChildIndex(child: T): number\n    {\n        const index = this.children.indexOf(child);\n\n        if (index === -1)\n        {\n            throw new Error('The supplied DisplayObject must be a child of the caller');\n        }\n\n        return index;\n    }\n\n    /**\n     * Changes the position of an existing child in the display object container\n     * @param child - The child DisplayObject instance for which you want to change the index number\n     * @param index - The resulting index number for the child display object\n     */\n    setChildIndex(child: T, index: number): void\n    {\n        if (index < 0 || index >= this.children.length)\n        {\n            throw new Error(`The index ${index} supplied is out of bounds ${this.children.length}`);\n        }\n\n        const currentIndex = this.getChildIndex(child);\n\n        utils.removeItems(this.children, currentIndex, 1); // remove from old position\n        this.children.splice(index, 0, child); // add at new position\n\n        this.onChildrenChange(index);\n    }\n\n    /**\n     * Returns the child at the specified index\n     * @param index - The index to get the child at\n     * @returns - The child at the given index, if any.\n     */\n    getChildAt(index: number): T\n    {\n        if (index < 0 || index >= this.children.length)\n        {\n            throw new Error(`getChildAt: Index (${index}) does not exist.`);\n        }\n\n        return this.children[index];\n    }\n\n    /**\n     * Removes one or more children from the container.\n     * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to remove\n     * @returns {PIXI.DisplayObject} The first child that was removed.\n     */\n    removeChild<U extends T[]>(...children: U): U[0]\n    {\n        // if there is only one argument we can bypass looping through the them\n        if (children.length > 1)\n        {\n            // loop through the arguments property and remove all children\n            for (let i = 0; i < children.length; i++)\n            {\n                this.removeChild(children[i]);\n            }\n        }\n        else\n        {\n            const child = children[0];\n            const index = this.children.indexOf(child);\n\n            if (index === -1) return null;\n\n            child.parent = null;\n            // ensure child transform will be recalculated\n            child.transform._parentID = -1;\n            utils.removeItems(this.children, index, 1);\n\n            // ensure bounds will be recalculated\n            this._boundsID++;\n\n            // TODO - lets either do all callbacks or all events.. not both!\n            this.onChildrenChange(index);\n            child.emit('removed', this);\n            this.emit('childRemoved', child, this, index);\n        }\n\n        return children[0];\n    }\n\n    /**\n     * Removes a child from the specified index position.\n     * @param index - The index to get the child from\n     * @returns The child that was removed.\n     */\n    removeChildAt(index: number): T\n    {\n        const child = this.getChildAt(index);\n\n        // ensure child transform will be recalculated..\n        child.parent = null;\n        child.transform._parentID = -1;\n        utils.removeItems(this.children, index, 1);\n\n        // ensure bounds will be recalculated\n        this._boundsID++;\n\n        // TODO - lets either do all callbacks or all events.. not both!\n        this.onChildrenChange(index);\n        child.emit('removed', this);\n        this.emit('childRemoved', child, this, index);\n\n        return child;\n    }\n\n    /**\n     * Removes all children from this container that are within the begin and end indexes.\n     * @param beginIndex - The beginning position.\n     * @param endIndex - The ending position. Default value is size of the container.\n     * @returns - List of removed children\n     */\n    removeChildren(beginIndex = 0, endIndex = this.children.length): T[]\n    {\n        const begin = beginIndex;\n        const end = endIndex;\n        const range = end - begin;\n        let removed;\n\n        if (range > 0 && range <= end)\n        {\n            removed = this.children.splice(begin, range);\n\n            for (let i = 0; i < removed.length; ++i)\n            {\n                removed[i].parent = null;\n                if (removed[i].transform)\n                {\n                    removed[i].transform._parentID = -1;\n                }\n            }\n\n            this._boundsID++;\n\n            this.onChildrenChange(beginIndex);\n\n            for (let i = 0; i < removed.length; ++i)\n            {\n                removed[i].emit('removed', this);\n                this.emit('childRemoved', removed[i], this, i);\n            }\n\n            return removed;\n        }\n        else if (range === 0 && this.children.length === 0)\n        {\n            return [];\n        }\n\n        throw new RangeError('removeChildren: numeric values are outside the acceptable range.');\n    }\n\n    /** Sorts children by zIndex. Previous order is maintained for 2 children with the same zIndex. */\n    sortChildren(): void\n    {\n        let sortRequired = false;\n\n        for (let i = 0, j = this.children.length; i < j; ++i)\n        {\n            const child = this.children[i];\n\n            child._lastSortedIndex = i;\n\n            if (!sortRequired && child.zIndex !== 0)\n            {\n                sortRequired = true;\n            }\n        }\n\n        if (sortRequired && this.children.length > 1)\n        {\n            this.children.sort(sortChildren);\n        }\n\n        this.sortDirty = false;\n    }\n\n    /** Updates the transform on all children of this container for rendering. */\n    updateTransform(): void\n    {\n        if (this.sortableChildren && this.sortDirty)\n        {\n            this.sortChildren();\n        }\n\n        this._boundsID++;\n\n        this.transform.updateTransform(this.parent.transform);\n\n        // TODO: check render flags, how to process stuff here\n        this.worldAlpha = this.alpha * this.parent.worldAlpha;\n\n        for (let i = 0, j = this.children.length; i < j; ++i)\n        {\n            const child = this.children[i];\n\n            if (child.visible)\n            {\n                child.updateTransform();\n            }\n        }\n    }\n\n    /**\n     * Recalculates the bounds of the container.\n     *\n     * This implementation will automatically fit the children's bounds into the calculation. Each child's bounds\n     * is limited to its mask's bounds or filterArea, if any is applied.\n     */\n    calculateBounds(): void\n    {\n        this._bounds.clear();\n\n        this._calculateBounds();\n\n        for (let i = 0; i < this.children.length; i++)\n        {\n            const child = this.children[i];\n\n            if (!child.visible || !child.renderable)\n            {\n                continue;\n            }\n\n            child.calculateBounds();\n\n            // TODO: filter+mask, need to mask both somehow\n            if (child._mask)\n            {\n                const maskObject = ((child._mask as MaskData).isMaskData\n                    ? (child._mask as MaskData).maskObject : child._mask) as Container;\n\n                if (maskObject)\n                {\n                    maskObject.calculateBounds();\n                    this._bounds.addBoundsMask(child._bounds, maskObject._bounds);\n                }\n                else\n                {\n                    this._bounds.addBounds(child._bounds);\n                }\n            }\n            else if (child.filterArea)\n            {\n                this._bounds.addBoundsArea(child._bounds, child.filterArea);\n            }\n            else\n            {\n                this._bounds.addBounds(child._bounds);\n            }\n        }\n\n        this._bounds.updateID = this._boundsID;\n    }\n\n    /**\n     * Retrieves the local bounds of the displayObject as a rectangle object.\n     *\n     * Calling `getLocalBounds` may invalidate the `_bounds` of the whole subtree below. If using it inside a render()\n     * call, it is advised to call `getBounds()` immediately after to recalculate the world bounds of the subtree.\n     * @param rect - Optional rectangle to store the result of the bounds calculation.\n     * @param skipChildrenUpdate - Setting to `true` will stop re-calculation of children transforms,\n     *  it was default behaviour of pixi 4.0-5.2 and caused many problems to users.\n     * @returns - The rectangular bounding area.\n     */\n    public getLocalBounds(rect?: Rectangle, skipChildrenUpdate = false): Rectangle\n    {\n        const result = super.getLocalBounds(rect);\n\n        if (!skipChildrenUpdate)\n        {\n            for (let i = 0, j = this.children.length; i < j; ++i)\n            {\n                const child = this.children[i];\n\n                if (child.visible)\n                {\n                    child.updateTransform();\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Recalculates the content bounds of this object. This should be overriden to\n     * calculate the bounds of this specific object (not including children).\n     * @protected\n     */\n    protected _calculateBounds(): void\n    {\n        // FILL IN//\n    }\n\n    /**\n     * Renders this object and its children with culling.\n     * @protected\n     * @param {PIXI.Renderer} renderer - The renderer\n     */\n    protected _renderWithCulling(renderer: Renderer): void\n    {\n        const sourceFrame = renderer.renderTexture.sourceFrame;\n\n        // If the source frame is empty, stop rendering.\n        if (!(sourceFrame.width > 0 && sourceFrame.height > 0))\n        {\n            return;\n        }\n\n        // Render the content of the container only if its bounds intersect with the source frame.\n        // All filters are on the stack at this point, and the filter source frame is bound:\n        // therefore, even if the bounds to non intersect the filter frame, the filter\n        // is still applied and any filter padding that is in the frame is rendered correctly.\n\n        let bounds: Rectangle;\n        let transform: Matrix;\n\n        // If cullArea is set, we use this rectangle instead of the bounds of the object. The cullArea\n        // rectangle must completely contain the container and its children including filter padding.\n        if (this.cullArea)\n        {\n            bounds = this.cullArea;\n            transform = this.worldTransform;\n        }\n        // If the container doesn't override _render, we can skip the bounds calculation and intersection test.\n        else if (this._render !== Container.prototype._render)\n        {\n            bounds = this.getBounds(true);\n        }\n\n        // Prepend the transform that is appended to the projection matrix.\n        const projectionTransform = renderer.projection.transform;\n\n        if (projectionTransform)\n        {\n            if (transform)\n            {\n                transform = tempMatrix.copyFrom(transform);\n                transform.prepend(projectionTransform);\n            }\n            else\n            {\n                transform = projectionTransform;\n            }\n        }\n\n        // Render the container if the source frame intersects the bounds.\n        if (bounds && sourceFrame.intersects(bounds, transform))\n        {\n            this._render(renderer);\n        }\n        // If the bounds are defined by cullArea and do not intersect with the source frame, stop rendering.\n        else if (this.cullArea)\n        {\n            return;\n        }\n\n        // Unless cullArea is set, we cannot skip the children if the bounds of the container do not intersect\n        // the source frame, because the children might have filters with nonzero padding, which may intersect\n        // with the source frame while the bounds do not: filter padding is not included in the bounds.\n\n        // If cullArea is not set, render the children with culling temporarily enabled so that they are not rendered\n        // if they are out of frame; otherwise, render the children normally.\n        for (let i = 0, j = this.children.length; i < j; ++i)\n        {\n            const child = this.children[i];\n            const childCullable = child.cullable;\n\n            child.cullable = childCullable || !this.cullArea;\n            child.render(renderer);\n            child.cullable = childCullable;\n        }\n    }\n\n    /**\n     * Renders the object using the WebGL renderer.\n     *\n     * The [_render]{@link PIXI.Container#_render} method is be overriden for rendering the contents of the\n     * container itself. This `render` method will invoke it, and also invoke the `render` methods of all\n     * children afterward.\n     *\n     * If `renderable` or `visible` is false or if `worldAlpha` is not positive or if `cullable` is true and\n     * the bounds of this object are out of frame, this implementation will entirely skip rendering.\n     * See {@link PIXI.DisplayObject} for choosing between `renderable` or `visible`. Generally,\n     * setting alpha to zero is not recommended for purely skipping rendering.\n     *\n     * When your scene becomes large (especially when it is larger than can be viewed in a single screen), it is\n     * advised to employ **culling** to automatically skip rendering objects outside of the current screen.\n     * See [cullable]{@link PIXI.DisplayObject#cullable} and [cullArea]{@link PIXI.DisplayObject#cullArea}.\n     * Other culling methods might be better suited for a large number static objects; see\n     * [@pixi-essentials/cull]{@link https://www.npmjs.com/package/@pixi-essentials/cull} and\n     * [pixi-cull]{@link https://www.npmjs.com/package/pixi-cull}.\n     *\n     * The [renderAdvanced]{@link PIXI.Container#renderAdvanced} method is internally used when when masking or\n     * filtering is applied on a container. This does, however, break batching and can affect performance when\n     * masking and filtering is applied extensively throughout the scene graph.\n     * @param renderer - The renderer\n     */\n    render(renderer: Renderer): void\n    {\n        // if the object is not visible or the alpha is 0 then no need to render this element\n        if (!this.visible || this.worldAlpha <= 0 || !this.renderable)\n        {\n            return;\n        }\n\n        // do a quick check to see if this element has a mask or a filter.\n        if (this._mask || this.filters?.length)\n        {\n            this.renderAdvanced(renderer);\n        }\n        else if (this.cullable)\n        {\n            this._renderWithCulling(renderer);\n        }\n        else\n        {\n            this._render(renderer);\n\n            for (let i = 0, j = this.children.length; i < j; ++i)\n            {\n                this.children[i].render(renderer);\n            }\n        }\n    }\n\n    /**\n     * Render the object using the WebGL renderer and advanced features.\n     * @param renderer - The renderer\n     */\n    protected renderAdvanced(renderer: Renderer): void\n    {\n        const filters = this.filters;\n        const mask = this._mask as MaskData;\n\n        // push filter first as we need to ensure the stencil buffer is correct for any masking\n        if (filters)\n        {\n            if (!this._enabledFilters)\n            {\n                this._enabledFilters = [];\n            }\n\n            this._enabledFilters.length = 0;\n\n            for (let i = 0; i < filters.length; i++)\n            {\n                if (filters[i].enabled)\n                {\n                    this._enabledFilters.push(filters[i]);\n                }\n            }\n        }\n\n        const flush = (filters && this._enabledFilters?.length)\n            || (mask && (!mask.isMaskData\n                || (mask.enabled && (mask.autoDetect || mask.type !== MASK_TYPES.NONE))));\n\n        if (flush)\n        {\n            renderer.batch.flush();\n        }\n\n        if (filters && this._enabledFilters?.length)\n        {\n            renderer.filter.push(this, this._enabledFilters);\n        }\n\n        if (mask)\n        {\n            renderer.mask.push(this, this._mask);\n        }\n\n        if (this.cullable)\n        {\n            this._renderWithCulling(renderer);\n        }\n        else\n        {\n            this._render(renderer);\n\n            for (let i = 0, j = this.children.length; i < j; ++i)\n            {\n                this.children[i].render(renderer);\n            }\n        }\n\n        if (flush)\n        {\n            renderer.batch.flush();\n        }\n\n        if (mask)\n        {\n            renderer.mask.pop(this);\n        }\n\n        if (filters && this._enabledFilters?.length)\n        {\n            renderer.filter.pop();\n        }\n    }\n\n    /**\n     * To be overridden by the subclasses.\n     * @param _renderer - The renderer\n     */\n    protected _render(_renderer: Renderer): void // eslint-disable-line no-unused-vars\n    {\n        // this is where content itself gets rendered...\n    }\n\n    /**\n     * Removes all internal references and listeners as well as removes children from the display list.\n     * Do not use a Container after calling `destroy`.\n     * @param options - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have their destroy\n     *  method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=false] - Only used for child Sprites if options.children is set to true\n     *  Should it destroy the texture of the child sprite\n     * @param {boolean} [options.baseTexture=false] - Only used for child Sprites if options.children is set to true\n     *  Should it destroy the base texture of the child sprite\n     */\n    destroy(options?: IDestroyOptions | boolean): void\n    {\n        super.destroy();\n\n        this.sortDirty = false;\n\n        const destroyChildren = typeof options === 'boolean' ? options : options?.children;\n\n        const oldChildren = this.removeChildren(0, this.children.length);\n\n        if (destroyChildren)\n        {\n            for (let i = 0; i < oldChildren.length; ++i)\n            {\n                oldChildren[i].destroy(options);\n            }\n        }\n    }\n\n    /** The width of the Container, setting this will actually modify the scale to achieve the value set. */\n    get width(): number\n    {\n        return this.scale.x * this.getLocalBounds().width;\n    }\n\n    set width(value: number)\n    {\n        const width = this.getLocalBounds().width;\n\n        if (width !== 0)\n        {\n            this.scale.x = value / width;\n        }\n        else\n        {\n            this.scale.x = 1;\n        }\n\n        this._width = value;\n    }\n\n    /** The height of the Container, setting this will actually modify the scale to achieve the value set. */\n    get height(): number\n    {\n        return this.scale.y * this.getLocalBounds().height;\n    }\n\n    set height(value: number)\n    {\n        const height = this.getLocalBounds().height;\n\n        if (height !== 0)\n        {\n            this.scale.y = value / height;\n        }\n        else\n        {\n            this.scale.y = 1;\n        }\n\n        this._height = value;\n    }\n}\n\n/**\n * Container default updateTransform, does update children of container.\n * Will crash if there's no parent element.\n * @memberof PIXI.Container#\n * @method containerUpdateTransform\n */\nContainer.prototype.containerUpdateTransform = Container.prototype.updateTransform;\n"],"names":["Matrix","_Container","DisplayObject","utils","MASK_TYPES"],"mappings":"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"}