{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["/**\n * Different types of environments for WebGL.\n * @static\n * @memberof PIXI\n * @enum {number}\n */\nexport enum ENV\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    /**\n     * Used for older v1 WebGL devices. PixiJS will aim to ensure compatibility\n     * with older / less advanced devices. If you experience unexplained flickering prefer this environment.\n     * @default 0\n     */\n    WEBGL_LEGACY,\n    /**\n     * Version 1 of WebGL\n     * @default 1\n     */\n    WEBGL,\n    /**\n     * Version 2 of WebGL\n     * @default 2\n     */\n    WEBGL2,\n}\n\n/**\n * Constant to identify the Renderer Type.\n * @static\n * @memberof PIXI\n * @enum {number}\n */\nexport enum RENDERER_TYPE\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    /**\n     * Unknown render type.\n     * @default 0\n     */\n    UNKNOWN,\n    /**\n     * WebGL render type.\n     * @default 1\n     */\n    WEBGL,\n    /**\n     * Canvas render type.\n     * @default 2\n     */\n    CANVAS,\n}\n\n/**\n * Bitwise OR of masks that indicate the buffers to be cleared.\n * @static\n * @memberof PIXI\n * @enum {number}\n */\nexport enum BUFFER_BITS\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    /**\n     * Indicates the buffers currently enabled for color writing.\n     * @default 0x00004000\n     */\n    COLOR = 0x00004000,\n    /**\n     * Indicates the depth buffer.\n     * @default 0x00000100\n     */\n    DEPTH = 0x00000100,\n    /**\n     * Indicates the stencil buffer.\n     * @default 0x00000400\n     */\n    STENCIL = 0x00000400\n}\n\n/**\n * Various blend modes supported by PIXI.\n *\n * IMPORTANT - The WebGL renderer only supports the NORMAL, ADD, MULTIPLY and SCREEN blend modes.\n * Anything else will silently act like NORMAL.\n * @memberof PIXI\n * @enum {number}\n */\nexport enum BLEND_MODES\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    /**\n     * @default 0\n     */\n    NORMAL = 0,\n    /**\n     * @default 1\n     */\n    ADD = 1,\n    /**\n     * The pixels of the top layer are multiplied with the corresponding pixel of the bottom layer.\n     * A darker picture is the result.\n     * @default 2\n     */\n    MULTIPLY = 2,\n    /**\n     * The pixels are inverted, multiplied, and inverted again. A lighter picture is the result (opposite of multiply)\n     * @default 3\n     */\n    SCREEN = 3,\n    /**\n     * A combination of multiply and screen. Dark parts on the base layer become darker, and light parts become lighter.\n     *\n     * Canvas Renderer only.\n     * @default 4\n     */\n    OVERLAY = 4,\n    /**\n     * Retains the darkest pixels of both layers.\n     *\n     * Canvas Renderer only.\n     * @default 5\n     */\n    DARKEN = 5,\n    /**\n     * Retains the lightest pixels of both layers.\n     *\n     * Canvas Renderer only.\n     * @default 6\n     */\n    LIGHTEN = 6,\n    /**\n     * Divides the bottom layer by the inverted top layer.\n     *\n     * Canvas Renderer only.\n     * @default 7\n     */\n    COLOR_DODGE = 7,\n    /**\n     * Divides the inverted bottom layer by the top layer, and then inverts the result.\n     *\n     * Canvas Renderer only.\n     * @default 8\n     */\n    COLOR_BURN = 8,\n    /**\n     * A combination of multiply and screen like overlay, but with top and bottom layer swapped.\n     *\n     * Canvas Renderer only.\n     * @default 9\n     */\n    HARD_LIGHT = 9,\n    /**\n     * A softer version of hard-light. Pure black or white does not result in pure black or white.\n     *\n     * Canvas Renderer only.\n     * @default 10\n     */\n    SOFT_LIGHT = 10,\n    /**\n     * Subtracts the bottom layer from the top layer or the other way round to always get a positive value.\n     *\n     * Canvas Renderer only.\n     * @default 11\n     */\n    DIFFERENCE = 11,\n    /**\n     * Like difference, but with lower contrast.\n     *\n     * Canvas Renderer only.\n     * @default 12\n     */\n    EXCLUSION = 12,\n    /**\n     * Preserves the luma and chroma of the bottom layer, while adopting the hue of the top layer.\n     *\n     * Canvas Renderer only.\n     * @default 13\n     */\n    HUE = 13,\n    /**\n     * Preserves the luma and hue of the bottom layer, while adopting the chroma of the top layer.\n     *\n     * Canvas Renderer only.\n     * @default 14\n     */\n    SATURATION = 14,\n    /**\n     * Preserves the luma of the bottom layer, while adopting the hue and chroma of the top layer.\n     *\n     * Canvas Renderer only.\n     * @default 15\n     */\n    COLOR = 15,\n    /**\n     * Preserves the hue and chroma of the bottom layer, while adopting the luma of the top layer.\n     *\n     * Canvas Renderer only.\n     * @default 16\n     */\n    LUMINOSITY = 16,\n    /**\n     * @default 17\n     */\n    NORMAL_NPM = 17,\n    /**\n     * @default 18\n     */\n    ADD_NPM = 18,\n    /**\n     * @default 19\n     */\n    SCREEN_NPM = 19,\n    /**\n     * @default 20\n     */\n    NONE = 20,\n\n    /**\n     * Draws new shapes on top of the existing canvas content.\n     * @default 0\n     */\n    SRC_OVER = 0,\n    /**\n     * The new shape is drawn only where both the new shape and the destination canvas overlap.\n     * Everything else is made transparent.\n     * @default 21\n     */\n    SRC_IN = 21,\n    /**\n     * The new shape is drawn where it doesn't overlap the existing canvas content.\n     * @default 22\n     */\n    SRC_OUT = 22,\n    /**\n     * The new shape is only drawn where it overlaps the existing canvas content.\n     * @default 23\n     */\n    SRC_ATOP = 23,\n    /**\n     * New shapes are drawn behind the existing canvas content.\n     * @default 24\n     */\n    DST_OVER = 24,\n    /**\n     * The existing canvas content is kept where both the new shape and existing canvas content overlap.\n     * Everything else is made transparent.\n     * @default 25\n     */\n    DST_IN = 25,\n    /**\n     * The existing content is kept where it doesn't overlap the new shape.\n     * @default 26\n     */\n    DST_OUT = 26,\n    /**\n     * The existing canvas is only kept where it overlaps the new shape. The new shape is drawn behind the canvas content.\n     * @default 27\n     */\n    DST_ATOP = 27,\n    /**\n     * @default 26\n     */\n    ERASE = 26,\n    /**\n     * @default 28\n     */\n    SUBTRACT = 28,\n    /**\n     * Shapes are made transparent where both overlap and drawn normal everywhere else.\n     * @default 29\n     */\n    XOR = 29,\n}\n\n/**\n * Various webgl draw modes. These can be used to specify which GL drawMode to use\n * under certain situations and renderers.\n * @memberof PIXI\n * @static\n * @enum {number}\n */\nexport enum DRAW_MODES\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    /**\n     * To draw a series of points.\n     * @default 0\n     */\n    POINTS,\n    /**\n     *  To draw a series of unconnected line segments (individual lines).\n     * @default 1\n     */\n    LINES,\n    /**\n     *  To draw a series of connected line segments. It also joins the first and last vertices to form a loop.\n     * @default 2\n     */\n    LINE_LOOP,\n    /**\n     * To draw a series of connected line segments.\n     * @default 3\n     */\n    LINE_STRIP,\n    /**\n     * To draw a series of separate triangles.\n     * @default 4\n     */\n    TRIANGLES,\n    /**\n     * To draw a series of connected triangles in strip fashion.\n     * @default 5\n     */\n    TRIANGLE_STRIP,\n    /**\n     * To draw a series of connected triangles sharing the first vertex in a fan-like fashion.\n     * @default 6\n     */\n    TRIANGLE_FAN,\n}\n\n/**\n * Various GL texture/resources formats.\n * @memberof PIXI\n * @static\n * @name FORMATS\n * @enum {number}\n */\nexport enum FORMATS\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    /**\n     * @default 6408\n     */\n    RGBA = 6408,\n    /**\n     * @default 6407\n     */\n    RGB = 6407,\n    /**\n     * @default 33319\n     */\n    RG = 33319,\n    /**\n     * @default 6403\n     */\n    RED = 6403,\n    /**\n     * @default 36249\n     */\n    RGBA_INTEGER = 36249,\n    /**\n     * @default 36248\n     */\n    RGB_INTEGER = 36248,\n    /**\n     * @default 33320\n     */\n    RG_INTEGER = 33320,\n    /**\n     * @default 36244\n     */\n    RED_INTEGER = 36244,\n    /**\n     * @default 6406\n     */\n    ALPHA = 6406,\n    /**\n     * @default 6409\n     */\n    LUMINANCE = 6409,\n    /**\n     * @default 6410\n     */\n    LUMINANCE_ALPHA = 6410,\n    /**\n     * @default 6402\n     */\n    DEPTH_COMPONENT = 6402,\n    /**\n     * @default 34041\n     */\n    DEPTH_STENCIL = 34041,\n}\n\n/**\n * Various GL target types.\n * @memberof PIXI\n * @static\n * @enum {number}\n */\nexport enum TARGETS\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    /**\n     * A two-dimensional texture\n     * @default 3553\n     */\n    TEXTURE_2D = 3553,\n    /**\n     * A cube-mapped texture. When using a WebGL 2 context, the following values are available additionally:\n     * - gl.TEXTURE_3D: A three-dimensional texture.\n     * - gl.TEXTURE_2D_ARRAY: A two-dimensional array texture.\n     * @default 34067\n     */\n    TEXTURE_CUBE_MAP = 34067,\n    /**\n     * A two-dimensional array texture.\n     * @default 35866\n     */\n    TEXTURE_2D_ARRAY = 35866,\n    /**\n     * Positive X face for a cube-mapped texture.\n     * @default 34069\n     */\n    TEXTURE_CUBE_MAP_POSITIVE_X = 34069,\n    /**\n     * Negative X face for a cube-mapped texture.\n     * @default 34070\n     */\n    TEXTURE_CUBE_MAP_NEGATIVE_X = 34070,\n    /**\n     * Positive Y face for a cube-mapped texture.\n     * @default 34071\n     */\n    TEXTURE_CUBE_MAP_POSITIVE_Y = 34071,\n    /**\n     * Negative Y face for a cube-mapped texture.\n     * @default 34072\n     */\n    TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072,\n    /**\n     * Positive Z face for a cube-mapped texture.\n     * @default 34073\n     */\n    TEXTURE_CUBE_MAP_POSITIVE_Z = 34073,\n    /**\n     * Negative Z face for a cube-mapped texture.\n     * @default 34074\n     */\n    TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074,\n}\n\n/**\n * Various GL data format types.\n * @memberof PIXI\n * @static\n * @enum {number}\n */\nexport enum TYPES\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    /**\n     * 8 bits per channel for gl.RGBA\n     * @default 5121\n     */\n    UNSIGNED_BYTE = 5121,\n    /**\n     * @default 5123\n     */\n    UNSIGNED_SHORT = 5123,\n    /**\n     * 5 red bits, 6 green bits, 5 blue bits.\n     * @default 33635\n     */\n    UNSIGNED_SHORT_5_6_5 = 33635,\n    /**\n     * 4 red bits, 4 green bits, 4 blue bits, 4 alpha bits.\n     * @default 32819\n     */\n    UNSIGNED_SHORT_4_4_4_4 = 32819,\n    /**\n     * 5 red bits, 5 green bits, 5 blue bits, 1 alpha bit.\n     * @default 32820\n     */\n    UNSIGNED_SHORT_5_5_5_1 = 32820,\n    /**\n     * @default 5125\n     */\n    UNSIGNED_INT = 5125,\n    /**\n     * @default 35899\n     */\n    UNSIGNED_INT_10F_11F_11F_REV = 35899,\n    /**\n     * @default 33640\n     */\n    UNSIGNED_INT_2_10_10_10_REV = 33640,\n    /**\n     * @default 34042\n     */\n    UNSIGNED_INT_24_8 = 34042,\n    /**\n     * @default 35902\n     */\n    UNSIGNED_INT_5_9_9_9_REV = 35902,\n    /**\n     * @default 5120\n     */\n    BYTE = 5120,\n    /**\n     * @default 5122\n     */\n    SHORT = 5122,\n    /**\n     * @default 5124\n     */\n    INT = 5124,\n    /**\n     * @default 5126\n     */\n    FLOAT = 5126,\n    /**\n     * @default 36269\n     */\n    FLOAT_32_UNSIGNED_INT_24_8_REV = 36269,\n    /**\n     * @default 36193\n     */\n    HALF_FLOAT = 36193,\n}\n\n/**\n * Various sampler types. Correspond to `sampler`, `isampler`, `usampler` GLSL types respectively.\n * WebGL1 works only with FLOAT.\n * @memberof PIXI\n * @static\n * @enum {number}\n */\nexport enum SAMPLER_TYPES\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    /**\n     * @default 0\n     */\n    FLOAT = 0,\n    /**\n     * @default 1\n     */\n    INT = 1,\n    /**\n     * @default 2\n     */\n    UINT = 2,\n}\n\n/**\n * The scale modes that are supported by pixi.\n *\n * The {@link PIXI.BaseTexture.defaultOptions.scaleMode} scale mode affects the default scaling mode of future operations.\n * It can be re-assigned to either LINEAR or NEAREST, depending upon suitability.\n * @memberof PIXI\n * @static\n * @enum {number}\n */\nexport enum SCALE_MODES\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    /**\n     * Pixelating scaling\n     * @default 0\n     */\n    NEAREST,\n    /**\n     * Smooth scaling\n     * @default 1\n     */\n    LINEAR,\n}\n\n/**\n * The wrap modes that are supported by pixi.\n *\n * The wrap mode affects the default wrapping mode of future operations.\n * It can be re-assigned to either CLAMP or REPEAT, depending upon suitability.\n * If the texture is non power of two then clamp will be used regardless as WebGL can\n * only use REPEAT if the texture is po2.\n *\n * This property only affects WebGL.\n * @memberof PIXI\n * @static\n * @enum {number}\n */\nexport enum WRAP_MODES\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    /**\n     * The textures uvs are clamped\n     * @default 33071\n     */\n    CLAMP = 33071,\n    /**\n     * The texture uvs tile and repeat\n     * @default 10497\n     */\n    REPEAT = 10497,\n    /**\n     * The texture uvs tile and repeat with mirroring\n     * @default 33648\n     */\n    MIRRORED_REPEAT = 33648,\n}\n\n/**\n * Mipmap filtering modes that are supported by pixi.\n *\n * The {@link PIXI.BaseTexture.defaultOptions.mipmap} affects default texture filtering.\n * Mipmaps are generated for a baseTexture if its `mipmap` field is `ON`,\n * or its `POW2` and texture dimensions are powers of 2.\n * Since WebGL 1 don't support mipmap for non-power-of-two textures,\n * `ON` option will work like `POW2` for WebGL 1.\n *\n * This property only affects WebGL.\n * @memberof PIXI\n * @static\n * @enum {number}\n */\nexport enum MIPMAP_MODES\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    /**\n     * No mipmaps.\n     * @default 0\n     */\n    OFF,\n    /**\n     * Generate mipmaps if texture dimensions are powers of 2.\n     * @default 1\n     */\n    POW2,\n    /**\n     * Always generate mipmaps.\n     * @default 2\n     */\n    ON,\n    /**\n     * Use mipmaps, but do not auto-generate them.\n     * this is used with a resource that supports buffering each level-of-detail.\n     * @default 3\n     */\n    ON_MANUAL,\n}\n\n/**\n * How to treat textures with premultiplied alpha\n * @memberof PIXI\n * @static\n * @enum {number}\n */\nexport enum ALPHA_MODES\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    /**\n     * Alias for NO_PREMULTIPLIED_ALPHA.\n     * @type {number}\n     * @default 0\n     */\n    NPM = 0,\n    /**\n     * Default option, alias for PREMULTIPLY_ON_UPLOAD.\n     * @type {number}\n     * @default 1\n     */\n    UNPACK = 1,\n    /**\n     * Alias for PREMULTIPLIED_ALPHA.\n     * @type {number}\n     * @default 2\n     */\n    PMA = 2,\n    /**\n     * Source is not premultiplied, leave it like that.\n     * Option for compressed and data textures that are created from typed arrays.\n     * @type {number}\n     * @default 0\n     */\n    NO_PREMULTIPLIED_ALPHA = 0,\n    /**\n     * Source is not premultiplied, premultiply on upload.\n     * Default option, used for all loaded images.\n     * @type {number}\n     * @default 1\n     */\n    PREMULTIPLY_ON_UPLOAD = 1,\n    /**\n     * Source is already premultiplied. Example: spine atlases with `_pma` suffix.\n     * @type {number}\n     * @default 2\n     */\n    PREMULTIPLIED_ALPHA = 2,\n}\n\n/**\n * Configure whether filter textures are cleared after binding.\n *\n * Filter textures need not be cleared if the filter does not use pixel blending. {@link PIXI.CLEAR_MODES.BLIT} will detect\n * this and skip clearing as an optimization.\n * @memberof PIXI\n * @static\n * @enum {number}\n */\nexport enum CLEAR_MODES\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    /**\n     * Alias for BLEND, same as `false` in earlier versions\n     * @default 0\n     */\n    NO = 0,\n    /**\n     * Alias for CLEAR, same as `true` in earlier versions\n     * @default 1\n     */\n    YES = 1,\n    /**\n     * Alias for BLIT\n     * @default 2\n     */\n    AUTO = 2,\n    /**\n     * Do not clear the filter texture. The filter's output will blend on top of the output texture.\n     * @default 0\n     */\n    BLEND = 0,\n    /**\n     * Always clear the filter texture.\n     * @default 1\n     */\n    CLEAR = 1,\n    /**\n     * Clear only if {@link PIXI.FilterSystem.forceClear} is set or if the filter uses pixel blending.\n     * @default 2\n     */\n    BLIT = 2,\n}\n\n/**\n * The gc modes that are supported by pixi.\n *\n * The {@link PIXI.TextureGCSystem.defaultMode} Garbage Collection mode for PixiJS textures is AUTO\n * If set to GC_MODE, the renderer will occasionally check textures usage. If they are not\n * used for a specified period of time they will be removed from the GPU. They will of course\n * be uploaded again when they are required. This is a silent behind the scenes process that\n * should ensure that the GPU does not  get filled up.\n *\n * Handy for mobile devices!\n * This property only affects WebGL.\n * @enum {number}\n * @static\n * @memberof PIXI\n */\nexport enum GC_MODES\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    /**\n     * Garbage collection will happen periodically automatically\n     * @default 0\n     */\n    AUTO,\n    /**\n     * Garbage collection will need to be called manually\n     * @default 1\n     */\n    MANUAL,\n}\n\n/**\n * Constants that specify float precision in shaders.\n * @memberof PIXI\n * @static\n * @enum {string}\n */\nexport enum PRECISION\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    /**\n     * lowp is at least an 9 bit value.\n     * For floating point values they can range from: -2 to +2,\n     * for integer values they are similar to Uint8Array or Int8Array\n     * @default lowp\n     */\n    LOW = 'lowp',\n    /**\n     * mediump is at least a 16 bit value.\n     * For floating point values they can range from: -2^14 to +2^14,\n     * for integer values they are similar to Uint16Array or Int16Array\n     * @default mediump\n     */\n    MEDIUM = 'mediump',\n    /**\n     * highp is at least a 32 bit value.\n     * For floating point values they can range from: -2^62 to +2^62,\n     * for integer values they are similar to Uint32Array or Int32Array\n     * @default highp\n     */\n    HIGH = 'highp',\n}\n\n/**\n * Constants for mask implementations.\n * We use `type` suffix because it leads to very different behaviours\n * @memberof PIXI\n * @static\n * @enum {number}\n */\nexport enum MASK_TYPES\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    /**\n     * Mask is ignored\n     * @default 0\n     */\n    NONE = 0,\n    /**\n     * Scissor mask, rectangle on screen, cheap\n     * @default 1\n     */\n    SCISSOR = 1,\n    /**\n     * Stencil mask, 1-bit, medium, works only if renderer supports stencil\n     * @default 2\n     */\n    STENCIL = 2,\n    /**\n     * Mask that uses SpriteMaskFilter, uses temporary RenderTexture\n     * @default 3\n     */\n    SPRITE = 3,\n    /**\n     * Color mask (RGBA)\n     * @default 4\n     */\n    COLOR = 4,\n}\n\n/**\n * Bitwise OR of masks that indicate the color channels that are rendered to.\n * @static\n * @memberof PIXI\n * @enum {number}\n */\nexport enum COLOR_MASK_BITS\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    /**\n     * Red channel.\n     * @default 0x1\n     */\n    RED = 0x1,\n    /**\n     * Green channel\n     * @default 0x2\n     */\n    GREEN = 0x2,\n    /**\n     * Blue channel.\n     * @default 0x4\n     */\n    BLUE = 0x4,\n    /**\n     * Alpha channel.\n     * @default 0x\n     */\n    ALPHA = 0x8\n}\n\n/**\n * Constants for multi-sampling antialiasing.\n * @see PIXI.Framebuffer#multisample\n * @memberof PIXI\n * @static\n * @enum {number}\n */\nexport enum MSAA_QUALITY\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    /**\n     * No multisampling for this renderTexture\n     * @default 0\n     */\n    NONE = 0,\n    /**\n     * Try 2 samples\n     * @default 2\n     */\n    LOW = 2,\n    /**\n     * Try 4 samples\n     * @default 4\n     */\n    MEDIUM = 4,\n    /**\n     * Try 8 samples\n     * @default 8\n     */\n    HIGH = 8\n}\n\n/**\n * Constants for various buffer types in Pixi\n * @see PIXI.BUFFER_TYPE\n * @memberof PIXI\n * @static\n * @enum {number}\n */\nexport enum BUFFER_TYPE\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    /**\n     * buffer type for using as an index buffer\n     * @default 34963\n     */\n    ELEMENT_ARRAY_BUFFER = 34963,\n    /**\n     * buffer type for using attribute data\n     * @default 34962\n     */\n    ARRAY_BUFFER = 34962,\n    /**\n     * the buffer type is for uniform buffer objects\n     * @default 35345\n     */\n    UNIFORM_BUFFER = 35345,\n}\n"],"names":["ENV","RENDERER_TYPE","BUFFER_BITS","BLEND_MODES","DRAW_MODES","FORMATS","TARGETS","TYPES","SAMPLER_TYPES","SCALE_MODES","WRAP_MODES","MIPMAP_MODES","ALPHA_MODES","CLEAR_MODES","GC_MODES","PRECISION","MASK_TYPES","COLOR_MASK_BITS","MSAA_QUALITY","BUFFER_TYPE"],"mappings":"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"}