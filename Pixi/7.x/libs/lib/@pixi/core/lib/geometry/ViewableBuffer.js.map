{"version":3,"file":"ViewableBuffer.js","sources":["../../src/geometry/ViewableBuffer.ts"],"sourcesContent":["import type { ITypedArray } from './Buffer';\n\n/**\n * Flexible wrapper around `ArrayBuffer` that also provides typed array views on demand.\n * @memberof PIXI\n */\nexport class ViewableBuffer\n{\n    public size: number;\n\n    /** Underlying `ArrayBuffer` that holds all the data and is of capacity `this.size`. */\n    public rawBinaryData: ArrayBuffer;\n\n    /** View on the raw binary data as a `Uint32Array`. */\n    public uint32View: Uint32Array;\n\n    /** View on the raw binary data as a `Float32Array`. */\n    public float32View: Float32Array;\n\n    private _int8View: Int8Array;\n    private _uint8View: Uint8Array;\n    private _int16View: Int16Array;\n    private _uint16View: Uint16Array;\n    private _int32View: Int32Array;\n\n    /**\n     * @param length - The size of the buffer in bytes.\n     */\n    constructor(length: number);\n\n    /**\n     * @param arrayBuffer - The source array buffer.\n     */\n    constructor(arrayBuffer: ArrayBuffer);\n\n    constructor(sizeOrBuffer: number | ArrayBuffer | Uint8Array)\n    {\n        if (typeof sizeOrBuffer === 'number')\n        {\n            this.rawBinaryData = new ArrayBuffer(sizeOrBuffer);\n        }\n        else if (sizeOrBuffer instanceof Uint8Array)\n        {\n            this.rawBinaryData = sizeOrBuffer.buffer;\n        }\n        else\n        {\n            this.rawBinaryData = sizeOrBuffer;\n        }\n\n        this.uint32View = new Uint32Array(this.rawBinaryData);\n        this.float32View = new Float32Array(this.rawBinaryData);\n    }\n\n    /** View on the raw binary data as a `Int8Array`. */\n    get int8View(): Int8Array\n    {\n        if (!this._int8View)\n        {\n            this._int8View = new Int8Array(this.rawBinaryData);\n        }\n\n        return this._int8View;\n    }\n\n    /** View on the raw binary data as a `Uint8Array`. */\n    get uint8View(): Uint8Array\n    {\n        if (!this._uint8View)\n        {\n            this._uint8View = new Uint8Array(this.rawBinaryData);\n        }\n\n        return this._uint8View;\n    }\n\n    /**  View on the raw binary data as a `Int16Array`. */\n    get int16View(): Int16Array\n    {\n        if (!this._int16View)\n        {\n            this._int16View = new Int16Array(this.rawBinaryData);\n        }\n\n        return this._int16View;\n    }\n\n    /** View on the raw binary data as a `Uint16Array`. */\n    get uint16View(): Uint16Array\n    {\n        if (!this._uint16View)\n        {\n            this._uint16View = new Uint16Array(this.rawBinaryData);\n        }\n\n        return this._uint16View;\n    }\n\n    /** View on the raw binary data as a `Int32Array`. */\n    get int32View(): Int32Array\n    {\n        if (!this._int32View)\n        {\n            this._int32View = new Int32Array(this.rawBinaryData);\n        }\n\n        return this._int32View;\n    }\n\n    /**\n     * Returns the view of the given type.\n     * @param type - One of `int8`, `uint8`, `int16`,\n     *    `uint16`, `int32`, `uint32`, and `float32`.\n     * @returns - typed array of given type\n     */\n    view(type: string): ITypedArray\n    {\n        return (this as any)[`${type}View`];\n    }\n\n    /** Destroys all buffer references. Do not use after calling this. */\n    destroy(): void\n    {\n        this.rawBinaryData = null;\n        this._int8View = null;\n        this._uint8View = null;\n        this._int16View = null;\n        this._uint16View = null;\n        this._int32View = null;\n        this.uint32View = null;\n        this.float32View = null;\n    }\n\n    static sizeOf(type: string): number\n    {\n        switch (type)\n        {\n            case 'int8':\n            case 'uint8':\n                return 1;\n            case 'int16':\n            case 'uint16':\n                return 2;\n            case 'int32':\n            case 'uint32':\n            case 'float32':\n                return 4;\n            default:\n                throw new Error(`${type} isn't a valid view type`);\n        }\n    }\n}\n"],"names":[],"mappings":";AAMO,MAAM,eACb;AAAA,EA4BI,YAAY,cACZ;AACQ,WAAO,gBAAiB,WAExB,KAAK,gBAAgB,IAAI,YAAY,YAAY,IAE5C,wBAAwB,aAE7B,KAAK,gBAAgB,aAAa,SAIlC,KAAK,gBAAgB,cAGzB,KAAK,aAAa,IAAI,YAAY,KAAK,aAAa,GACpD,KAAK,cAAc,IAAI,aAAa,KAAK,aAAa;AAAA,EAC1D;AAAA;AAAA,EAGA,IAAI,WACJ;AACS,WAAA,KAAK,cAEN,KAAK,YAAY,IAAI,UAAU,KAAK,aAAa,IAG9C,KAAK;AAAA,EAChB;AAAA;AAAA,EAGA,IAAI,YACJ;AACS,WAAA,KAAK,eAEN,KAAK,aAAa,IAAI,WAAW,KAAK,aAAa,IAGhD,KAAK;AAAA,EAChB;AAAA;AAAA,EAGA,IAAI,YACJ;AACS,WAAA,KAAK,eAEN,KAAK,aAAa,IAAI,WAAW,KAAK,aAAa,IAGhD,KAAK;AAAA,EAChB;AAAA;AAAA,EAGA,IAAI,aACJ;AACS,WAAA,KAAK,gBAEN,KAAK,cAAc,IAAI,YAAY,KAAK,aAAa,IAGlD,KAAK;AAAA,EAChB;AAAA;AAAA,EAGA,IAAI,YACJ;AACS,WAAA,KAAK,eAEN,KAAK,aAAa,IAAI,WAAW,KAAK,aAAa,IAGhD,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,KAAK,MACL;AACY,WAAA,KAAa,GAAG,IAAI,MAAM;AAAA,EACtC;AAAA;AAAA,EAGA,UACA;AACS,SAAA,gBAAgB,MACrB,KAAK,YAAY,MACjB,KAAK,aAAa,MAClB,KAAK,aAAa,MAClB,KAAK,cAAc,MACnB,KAAK,aAAa,MAClB,KAAK,aAAa,MAClB,KAAK,cAAc;AAAA,EACvB;AAAA,EAEA,OAAO,OAAO,MACd;AACI,YAAQ,MACR;AAAA,MACI,KAAK;AAAA,MACL,KAAK;AACM,eAAA;AAAA,MACX,KAAK;AAAA,MACL,KAAK;AACM,eAAA;AAAA,MACX,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AACM,eAAA;AAAA,MACX;AACI,cAAM,IAAI,MAAM,GAAG,IAAI,0BAA0B;AAAA,IACzD;AAAA,EACJ;AACJ;;"}