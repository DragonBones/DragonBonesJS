{"version":3,"file":"Geometry.mjs","sources":["../../src/geometry/Geometry.ts"],"sourcesContent":["import { BUFFER_TYPE } from '@pixi/constants';\nimport { Runner } from '@pixi/runner';\nimport { getBufferType } from '@pixi/utils';\nimport { Attribute } from './Attribute';\nimport { Buffer } from './Buffer';\nimport { interleaveTypedArrays } from './utils/interleaveTypedArrays';\n\nimport type { TYPES } from '@pixi/constants';\nimport type { Dict } from '@pixi/utils';\nimport type { IArrayBuffer } from './Buffer';\n\nconst byteSizeMap: {[key: number]: number} = { 5126: 4, 5123: 2, 5121: 1 };\nlet UID = 0;\n\n/* eslint-disable object-shorthand */\nconst map: Dict<any> = {\n    Float32Array: Float32Array,\n    Uint32Array: Uint32Array,\n    Int32Array: Int32Array,\n    Uint8Array: Uint8Array,\n    Uint16Array: Uint16Array,\n};\n\n/* eslint-disable max-len */\n\n/**\n * The Geometry represents a model. It consists of two components:\n * - GeometryStyle - The structure of the model such as the attributes layout\n * - GeometryData - the data of the model - this consists of buffers.\n * This can include anything from positions, uvs, normals, colors etc.\n *\n * Geometry can be defined without passing in a style or data if required (thats how I prefer!)\n * @example\n * import { Geometry } from 'pixi.js';\n *\n * const geometry = new Geometry();\n *\n * geometry.addAttribute('positions', [0, 0, 100, 0, 0, 100, 100, 100], 2);\n * geometry.addAttribute('uvs', [0, 0, 1, 0, 0, 1, 1, 1], 2);\n * geometry.addIndex([0, 1, 2, 1, 3, 2]);\n * @memberof PIXI\n */\nexport class Geometry\n{\n    public buffers: Array<Buffer>;\n    public indexBuffer: Buffer;\n    public attributes: {[key: string]: Attribute};\n    public id: number;\n\n    /** Whether the geometry is instanced. */\n    public instanced: boolean;\n\n    /**\n     * Number of instances in this geometry, pass it to `GeometrySystem.draw()`.\n     * @default 1\n     */\n    public instanceCount: number;\n\n    /**\n     * A map of renderer IDs to webgl VAOs\n     * @type {object}\n     */\n    glVertexArrayObjects: {[key: number]: {[key: string]: WebGLVertexArrayObject}};\n    disposeRunner: Runner;\n\n    /** Count of existing (not destroyed) meshes that reference this geometry. */\n    refCount: number;\n\n    /**\n     * @param buffers - An array of buffers. optional.\n     * @param attributes - Of the geometry, optional structure of the attributes layout\n     */\n    constructor(buffers: Array<Buffer> = [], attributes: {[key: string]: Attribute} = {})\n    {\n        this.buffers = buffers;\n\n        this.indexBuffer = null;\n\n        this.attributes = attributes;\n\n        this.glVertexArrayObjects = {};\n\n        this.id = UID++;\n\n        this.instanced = false;\n        this.instanceCount = 1;\n\n        this.disposeRunner = new Runner('disposeGeometry');\n        this.refCount = 0;\n    }\n\n    /**\n     *\n     * Adds an attribute to the geometry\n     * Note: `stride` and `start` should be `undefined` if you dont know them, not 0!\n     * @param id - the name of the attribute (matching up to a shader)\n     * @param {PIXI.Buffer|number[]} buffer - the buffer that holds the data of the attribute . You can also provide an Array and a buffer will be created from it.\n     * @param size - the size of the attribute. If you have 2 floats per vertex (eg position x and y) this would be 2\n     * @param normalized - should the data be normalized.\n     * @param [type=PIXI.TYPES.FLOAT] - what type of number is the attribute. Check {@link PIXI.TYPES} to see the ones available\n     * @param [stride=0] - How far apart, in bytes, the start of each value is. (used for interleaving data)\n     * @param [start=0] - How far into the array to start reading values (used for interleaving data)\n     * @param instance - Instancing flag\n     * @returns - Returns self, useful for chaining.\n     */\n    addAttribute(id: string, buffer: Buffer | Float32Array | Uint32Array | Array<number>, size = 0, normalized = false,\n        type?: TYPES, stride?: number, start?: number, instance = false): this\n    {\n        if (!buffer)\n        {\n            throw new Error('You must pass a buffer when creating an attribute');\n        }\n\n        // check if this is a buffer!\n        if (!(buffer instanceof Buffer))\n        {\n            // its an array!\n            if (buffer instanceof Array)\n            {\n                buffer = new Float32Array(buffer);\n            }\n\n            buffer = new Buffer(buffer);\n        }\n\n        const ids = id.split('|');\n\n        if (ids.length > 1)\n        {\n            for (let i = 0; i < ids.length; i++)\n            {\n                this.addAttribute(ids[i], buffer, size, normalized, type);\n            }\n\n            return this;\n        }\n\n        let bufferIndex = this.buffers.indexOf(buffer);\n\n        if (bufferIndex === -1)\n        {\n            this.buffers.push(buffer);\n            bufferIndex = this.buffers.length - 1;\n        }\n\n        this.attributes[id] = new Attribute(bufferIndex, size, normalized, type, stride, start, instance);\n\n        // assuming that if there is instanced data then this will be drawn with instancing!\n        this.instanced = this.instanced || instance;\n\n        return this;\n    }\n\n    /**\n     * Returns the requested attribute.\n     * @param id - The name of the attribute required\n     * @returns - The attribute requested.\n     */\n    getAttribute(id: string): Attribute\n    {\n        return this.attributes[id];\n    }\n\n    /**\n     * Returns the requested buffer.\n     * @param id - The name of the buffer required.\n     * @returns - The buffer requested.\n     */\n    getBuffer(id: string): Buffer\n    {\n        return this.buffers[this.getAttribute(id).buffer];\n    }\n\n    /**\n     *\n     * Adds an index buffer to the geometry\n     * The index buffer contains integers, three for each triangle in the geometry, which reference the various attribute buffers (position, colour, UV coordinates, other UV coordinates, normal, â€¦). There is only ONE index buffer.\n     * @param {PIXI.Buffer|number[]} [buffer] - The buffer that holds the data of the index buffer. You can also provide an Array and a buffer will be created from it.\n     * @returns - Returns self, useful for chaining.\n     */\n    addIndex(buffer?: Buffer | IArrayBuffer | number[]): Geometry\n    {\n        if (!(buffer instanceof Buffer))\n        {\n            // its an array!\n            if (buffer instanceof Array)\n            {\n                buffer = new Uint16Array(buffer);\n            }\n\n            buffer = new Buffer(buffer);\n        }\n\n        buffer.type = BUFFER_TYPE.ELEMENT_ARRAY_BUFFER;\n\n        this.indexBuffer = buffer;\n\n        if (!this.buffers.includes(buffer))\n        {\n            this.buffers.push(buffer);\n        }\n\n        return this;\n    }\n\n    /**\n     * Returns the index buffer\n     * @returns - The index buffer.\n     */\n    getIndex(): Buffer\n    {\n        return this.indexBuffer;\n    }\n\n    /**\n     * This function modifies the structure so that all current attributes become interleaved into a single buffer\n     * This can be useful if your model remains static as it offers a little performance boost\n     * @returns - Returns self, useful for chaining.\n     */\n    interleave(): Geometry\n    {\n        // a simple check to see if buffers are already interleaved..\n        if (this.buffers.length === 1 || (this.buffers.length === 2 && this.indexBuffer)) return this;\n\n        // assume already that no buffers are interleaved\n        const arrays = [];\n        const sizes = [];\n        const interleavedBuffer = new Buffer();\n        let i;\n\n        for (i in this.attributes)\n        {\n            const attribute = this.attributes[i];\n\n            const buffer = this.buffers[attribute.buffer];\n\n            arrays.push(buffer.data);\n\n            sizes.push((attribute.size * byteSizeMap[attribute.type]) / 4);\n\n            attribute.buffer = 0;\n        }\n\n        interleavedBuffer.data = interleaveTypedArrays(arrays, sizes);\n\n        for (i = 0; i < this.buffers.length; i++)\n        {\n            if (this.buffers[i] !== this.indexBuffer)\n            {\n                this.buffers[i].destroy();\n            }\n        }\n\n        this.buffers = [interleavedBuffer];\n\n        if (this.indexBuffer)\n        {\n            this.buffers.push(this.indexBuffer);\n        }\n\n        return this;\n    }\n\n    /** Get the size of the geometries, in vertices. */\n    getSize(): number\n    {\n        for (const i in this.attributes)\n        {\n            const attribute = this.attributes[i];\n            const buffer = this.buffers[attribute.buffer];\n\n            return (buffer.data as any).length / ((attribute.stride / 4) || attribute.size);\n        }\n\n        return 0;\n    }\n\n    /** Disposes WebGL resources that are connected to this geometry. */\n    dispose(): void\n    {\n        this.disposeRunner.emit(this, false);\n    }\n\n    /** Destroys the geometry. */\n    destroy(): void\n    {\n        this.dispose();\n\n        this.buffers = null;\n        this.indexBuffer = null;\n        this.attributes = null;\n    }\n\n    /**\n     * Returns a clone of the geometry.\n     * @returns - A new clone of this geometry.\n     */\n    clone(): Geometry\n    {\n        const geometry = new Geometry();\n\n        for (let i = 0; i < this.buffers.length; i++)\n        {\n            geometry.buffers[i] = new Buffer(this.buffers[i].data.slice(0));\n        }\n\n        for (const i in this.attributes)\n        {\n            const attrib = this.attributes[i];\n\n            geometry.attributes[i] = new Attribute(\n                attrib.buffer,\n                attrib.size,\n                attrib.normalized,\n                attrib.type,\n                attrib.stride,\n                attrib.start,\n                attrib.instance\n            );\n        }\n\n        if (this.indexBuffer)\n        {\n            geometry.indexBuffer = geometry.buffers[this.buffers.indexOf(this.indexBuffer)];\n            geometry.indexBuffer.type = BUFFER_TYPE.ELEMENT_ARRAY_BUFFER;\n        }\n\n        return geometry;\n    }\n\n    /**\n     * Merges an array of geometries into a new single one.\n     *\n     * Geometry attribute styles must match for this operation to work.\n     * @param geometries - array of geometries to merge\n     * @returns - Shiny new geometry!\n     */\n    static merge(geometries: Array<Geometry>): Geometry\n    {\n        // todo add a geometry check!\n        // also a size check.. cant be too big!]\n\n        const geometryOut = new Geometry();\n\n        const arrays = [];\n        const sizes: Array<number> = [];\n        const offsets = [];\n\n        let geometry;\n\n        // pass one.. get sizes..\n        for (let i = 0; i < geometries.length; i++)\n        {\n            geometry = geometries[i];\n\n            for (let j = 0; j < geometry.buffers.length; j++)\n            {\n                sizes[j] = sizes[j] || 0;\n                sizes[j] += geometry.buffers[j].data.length;\n                offsets[j] = 0;\n            }\n        }\n\n        // build the correct size arrays..\n        for (let i = 0; i < geometry.buffers.length; i++)\n        {\n            // TODO types!\n            arrays[i] = new map[getBufferType(geometry.buffers[i].data)](sizes[i]);\n            geometryOut.buffers[i] = new Buffer(arrays[i]);\n        }\n\n        // pass to set data..\n        for (let i = 0; i < geometries.length; i++)\n        {\n            geometry = geometries[i];\n\n            for (let j = 0; j < geometry.buffers.length; j++)\n            {\n                arrays[j].set(geometry.buffers[j].data, offsets[j]);\n                offsets[j] += geometry.buffers[j].data.length;\n            }\n        }\n\n        geometryOut.attributes = geometry.attributes;\n\n        if (geometry.indexBuffer)\n        {\n            geometryOut.indexBuffer = geometryOut.buffers[geometry.buffers.indexOf(geometry.indexBuffer)];\n            geometryOut.indexBuffer.type = BUFFER_TYPE.ELEMENT_ARRAY_BUFFER;\n\n            let offset = 0;\n            let stride = 0;\n            let offset2 = 0;\n            let bufferIndexToCount = 0;\n\n            // get a buffer\n            for (let i = 0; i < geometry.buffers.length; i++)\n            {\n                if (geometry.buffers[i] !== geometry.indexBuffer)\n                {\n                    bufferIndexToCount = i;\n                    break;\n                }\n            }\n\n            // figure out the stride of one buffer..\n            for (const i in geometry.attributes)\n            {\n                const attribute = geometry.attributes[i];\n\n                if ((attribute.buffer | 0) === bufferIndexToCount)\n                {\n                    stride += ((attribute.size * byteSizeMap[attribute.type]) / 4);\n                }\n            }\n\n            // time to off set all indexes..\n            for (let i = 0; i < geometries.length; i++)\n            {\n                const indexBufferData = geometries[i].indexBuffer.data;\n\n                for (let j = 0; j < indexBufferData.length; j++)\n                {\n                    geometryOut.indexBuffer.data[j + offset2] += offset;\n                }\n\n                offset += geometries[i].buffers[bufferIndexToCount].data.length / (stride);\n                offset2 += indexBufferData.length;\n            }\n        }\n\n        return geometryOut;\n    }\n}\n"],"names":[],"mappings":"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"}