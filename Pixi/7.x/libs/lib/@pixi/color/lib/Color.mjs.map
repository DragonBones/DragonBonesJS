{"version":3,"file":"Color.mjs","sources":["../src/Color.ts"],"sourcesContent":["import { colord, extend } from '@pixi/colord';\nimport namesPlugin from '@pixi/colord/plugins/names';\n\nimport type {\n    AnyColor,\n    HslaColor,\n    HslColor,\n    HsvaColor,\n    HsvColor,\n    RgbaColor,\n    RgbColor\n} from '@pixi/colord';\n\nextend([namesPlugin]);\n\n/**\n * Value types for the constructor of {@link PIXI.Color}.\n * These types are extended from [colord](https://www.npmjs.com/package/colord) with some PixiJS-specific extensions.\n *\n * Possible value types are:\n * - [Color names](https://www.w3.org/TR/css-color-4/#named-colors):\n *   `'red'`, `'green'`, `'blue'`, `'white'`, etc.\n * - RGB hex integers (`0xRRGGBB`):\n *   `0xff0000`, `0x00ff00`, `0x0000ff`, etc.\n * - [RGB(A) hex strings](https://www.w3.org/TR/css-color-4/#hex-notation):\n *   - 6 digits (`RRGGBB`): `'ff0000'`, `'#00ff00'`, `'0x0000ff'`, etc.\n *   - 3 digits (`RGB`): `'f00'`, `'#0f0'`, `'0x00f'`, etc.\n *   - 8 digits (`RRGGBBAA`): `'ff000080'`, `'#00ff0080'`, `'0x0000ff80'`, etc.\n *   - 4 digits (`RGBA`): `'f008'`, `'#0f08'`, `'0x00f8'`, etc.\n * - RGB(A) objects:\n *   `{ r: 255, g: 0, b: 0 }`, `{ r: 255, g: 0, b: 0, a: 0.5 }`, etc.\n * - [RGB(A) strings](https://www.w3.org/TR/css-color-4/#rgb-functions):\n *   `'rgb(255, 0, 0)'`, `'rgb(100% 0% 0%)'`, `'rgba(255, 0, 0, 0.5)'`, `'rgba(100% 0% 0% / 50%)'`, etc.\n * - RGB(A) arrays:\n *   `[1, 0, 0]`, `[1, 0, 0, 0.5]`, etc.\n * - RGB(A) Float32Array:\n *   `new Float32Array([1, 0, 0])`, `new Float32Array([1, 0, 0, 0.5])`, etc.\n * - RGB(A) Uint8Array:\n *   `new Uint8Array([255, 0, 0])`, `new Uint8Array([255, 0, 0, 128])`, etc.\n * - RGB(A) Uint8ClampedArray:\n *   `new Uint8ClampedArray([255, 0, 0])`, `new Uint8ClampedArray([255, 0, 0, 128])`, etc.\n * - HSL(A) objects:\n *   `{ h: 0, s: 100, l: 50 }`, `{ h: 0, s: 100, l: 50, a: 0.5 }`, etc.\n * - [HSL(A) strings](https://www.w3.org/TR/css-color-4/#the-hsl-notation):\n *   `'hsl(0, 100%, 50%)'`, `'hsl(0deg 100% 50%)'`, `'hsla(0, 100%, 50%, 0.5)'`, `'hsla(0deg 100% 50% / 50%)'`, etc.\n * - HSV(A) objects:\n *   `{ h: 0, s: 100, v: 100 }`, `{ h: 0, s: 100, v: 100, a: 0.5 }`, etc.\n * - {@link PIXI.Color} objects.\n * @memberof PIXI\n * @since 7.2.0\n */\nexport type ColorSource = string | number | number[] | Float32Array | Uint8Array | Uint8ClampedArray\n| HslColor | HslaColor | HsvColor | HsvaColor | RgbColor | RgbaColor | Color |\n// eslint-disable-next-line @typescript-eslint/ban-types\nNumber;\n\ntype ColorSourceTypedArray = Float32Array | Uint8Array | Uint8ClampedArray;\n\n/**\n * Color utility class.\n * @example\n * import { Color } from 'pixi.js';\n * new Color('red').toArray(); // [1, 0, 0, 1]\n * new Color(0xff0000).toArray(); // [1, 0, 0, 1]\n * new Color('ff0000').toArray(); // [1, 0, 0, 1]\n * new Color('#f00').toArray(); // [1, 0, 0, 1]\n * new Color('0xff0000ff').toArray(); // [1, 0, 0, 1]\n * new Color('#f00f').toArray(); // [1, 0, 0, 1]\n * new Color({ r: 255, g: 0, b: 0, a: 0.5 }).toArray(); // [1, 0, 0, 0.5]\n * new Color('rgb(255, 0, 0, 0.5)').toArray(); // [1, 0, 0, 0.5]\n * new Color([1, 1, 1]).toArray(); // [1, 1, 1, 1]\n * new Color([1, 0, 0, 0.5]).toArray(); // [1, 0, 0, 0.5]\n * new Color(new Float32Array([1, 0, 0, 0.5])).toArray(); // [1, 0, 0, 0.5]\n * new Color(new Uint8Array([255, 0, 0, 255])).toArray(); // [1, 0, 0, 1]\n * new Color(new Uint8ClampedArray([255, 0, 0, 255])).toArray(); // [1, 0, 0, 1]\n * new Color({ h: 0, s: 100, l: 50, a: 0.5 }).toArray(); // [1, 0, 0, 0.5]\n * new Color('hsl(0, 100%, 50%, 50%)').toArray(); // [1, 0, 0, 0.5]\n * new Color({ h: 0, s: 100, v: 100, a: 0.5 }).toArray(); // [1, 0, 0, 0.5]\n * @memberof PIXI\n * @since 7.2.0\n */\nexport class Color\n{\n    /**\n     * Default Color object for static uses\n     * @example\n     * import { Color } from 'pixi.js';\n     * Color.shared.setValue(0xffffff).toHex(); // '#ffffff'\n     */\n    static readonly shared = new Color();\n\n    /**\n     * Temporary Color object for static uses internally.\n     * As to not conflict with Color.shared.\n     * @ignore\n     */\n    private static readonly temp = new Color();\n\n    /** Pattern for hex strings */\n    private static readonly HEX_PATTERN = /^(#|0x)?(([a-f0-9]{3}){1,2}([a-f0-9]{2})?)$/i;\n\n    /** Internal color source, from constructor or set value */\n    private _value: Exclude<ColorSource, Color> | null;\n\n    /** Normalized rgba component, floats from 0-1 */\n    private _components: Float32Array;\n\n    /** Cache color as number */\n    private _int: number;\n\n    /**\n     * @param {PIXI.ColorSource} value - Optional value to use, if not provided, white is used.\n     */\n    constructor(value: ColorSource = 0xffffff)\n    {\n        this._value = null;\n        this._components = new Float32Array(4);\n        this._components.fill(1);\n        this._int = 0xffffff;\n        this.value = value;\n    }\n\n    /** Get red component (0 - 1) */\n    get red(): number\n    {\n        return this._components[0];\n    }\n\n    /** Get green component (0 - 1) */\n    get green(): number\n    {\n        return this._components[1];\n    }\n\n    /** Get blue component (0 - 1) */\n    get blue(): number\n    {\n        return this._components[2];\n    }\n\n    /** Get alpha component (0 - 1) */\n    get alpha(): number\n    {\n        return this._components[3];\n    }\n\n    /**\n     * Set the value, suitable for chaining\n     * @param value\n     * @see PIXI.Color.value\n     */\n    setValue(value: ColorSource): this\n    {\n        this.value = value;\n\n        return this;\n    }\n\n    /**\n     * The current color source.\n     *\n     * When setting:\n     * - Setting to an instance of `Color` will copy its color source and components.\n     * - Otherwise, `Color` will try to normalize the color source and set the components.\n     *   If the color source is invalid, an `Error` will be thrown and the `Color` will left unchanged.\n     *\n     * Note: The `null` in the setter's parameter type is added to match the TypeScript rule: return type of getter\n     * must be assignable to its setter's parameter type. Setting `value` to `null` will throw an `Error`.\n     *\n     * When getting:\n     * - A return value of `null` means the previous value was overridden (e.g., {@link PIXI.Color.multiply multiply},\n     *   {@link PIXI.Color.premultiply premultiply} or {@link PIXI.Color.round round}).\n     * - Otherwise, the color source used when setting is returned.\n     * @type {PIXI.ColorSource}\n     */\n    set value(value: ColorSource | null)\n    {\n        // Support copying from other Color objects\n        if (value instanceof Color)\n        {\n            this._value = this.cloneSource(value._value);\n            this._int = value._int;\n            this._components.set(value._components);\n        }\n        else if (value === null)\n        {\n            throw new Error('Cannot set PIXI.Color#value to null');\n        }\n        else if (this._value === null || !this.isSourceEqual(this._value, value))\n        {\n            this.normalize(value);\n            this._value = this.cloneSource(value);\n        }\n    }\n    get value(): Exclude<ColorSource, Color> | null\n    {\n        return this._value;\n    }\n\n    /**\n     * Copy a color source internally.\n     * @param value - Color source\n     */\n    private cloneSource(value: Exclude<ColorSource, Color> | null): Exclude<ColorSource, Color> | null\n    {\n        if (typeof value === 'string' || typeof value === 'number' || value instanceof Number || value === null)\n        {\n            return value;\n        }\n        else if (Array.isArray(value) || ArrayBuffer.isView(value))\n        {\n            return value.slice(0);\n        }\n        else if (typeof value === 'object' && value !== null)\n        {\n            return { ...value };\n        }\n\n        return value;\n    }\n\n    /**\n     * Equality check for color sources.\n     * @param value1 - First color source\n     * @param value2 - Second color source\n     * @returns `true` if the color sources are equal, `false` otherwise.\n     */\n    private isSourceEqual(value1: Exclude<ColorSource, Color>, value2: Exclude<ColorSource, Color>): boolean\n    {\n        const type1 = typeof value1;\n        const type2 = typeof value2;\n\n        // Mismatched types\n        if (type1 !== type2)\n        {\n            return false;\n        }\n        // Handle numbers/strings and things that extend Number\n        // important to do the instanceof Number first, as this is \"object\" type\n        else if (type1 === 'number' || type1 === 'string' || value1 instanceof Number)\n        {\n            return value1 === value2;\n        }\n        // Handle Arrays and TypedArrays\n        else if ((Array.isArray(value1) && Array.isArray(value2))\n            || (ArrayBuffer.isView(value1) && ArrayBuffer.isView(value2)))\n        {\n            if (value1.length !== value2.length)\n            {\n                return false;\n            }\n\n            return value1.every((v, i) => v === value2[i]);\n        }\n        // Handle Objects\n        else if (value1 !== null && value2 !== null)\n        {\n            const keys1 = Object.keys(value1) as (keyof typeof value1)[];\n            const keys2 = Object.keys(value2) as (keyof typeof value2)[];\n\n            if (keys1.length !== keys2.length)\n            {\n                return false;\n            }\n\n            return keys1.every((key) => value1[key] === value2[key]);\n        }\n\n        return value1 === value2;\n    }\n\n    /**\n     * Convert to a RGBA color object.\n     * @example\n     * import { Color } from 'pixi.js';\n     * new Color('white').toRgb(); // returns { r: 1, g: 1, b: 1, a: 1 }\n     */\n    toRgba(): RgbaColor\n    {\n        const [r, g, b, a] = this._components;\n\n        return { r, g, b, a };\n    }\n\n    /**\n     * Convert to a RGB color object.\n     * @example\n     * import { Color } from 'pixi.js';\n     * new Color('white').toRgb(); // returns { r: 1, g: 1, b: 1 }\n     */\n    toRgb(): RgbColor\n    {\n        const [r, g, b] = this._components;\n\n        return { r, g, b };\n    }\n\n    /** Convert to a CSS-style rgba string: `rgba(255,255,255,1.0)`. */\n    toRgbaString(): string\n    {\n        const [r, g, b] = this.toUint8RgbArray();\n\n        return `rgba(${r},${g},${b},${this.alpha})`;\n    }\n\n    /**\n     * Convert to an [R, G, B] array of clamped uint8 values (0 to 255).\n     * @example\n     * import { Color } from 'pixi.js';\n     * new Color('white').toUint8RgbArray(); // returns [255, 255, 255]\n     * @param {number[]|Uint8Array|Uint8ClampedArray} [out] - Output array\n     */\n    toUint8RgbArray(): number[];\n    toUint8RgbArray<T extends (number[] | Uint8Array | Uint8ClampedArray)>(out: T): T;\n    toUint8RgbArray<T extends (number[] | Uint8Array | Uint8ClampedArray)>(out?: T): T\n    {\n        const [r, g, b] = this._components;\n\n        out = out ?? [] as number[] as T;\n\n        out[0] = Math.round(r * 255);\n        out[1] = Math.round(g * 255);\n        out[2] = Math.round(b * 255);\n\n        return out;\n    }\n\n    /**\n     * Convert to an [R, G, B] array of normalized floats (numbers from 0.0 to 1.0).\n     * @example\n     * import { Color } from 'pixi.js';\n     * new Color('white').toRgbArray(); // returns [1, 1, 1]\n     * @param {number[]|Float32Array} [out] - Output array\n     */\n    toRgbArray(): number[];\n    toRgbArray<T extends (number[] | Float32Array)>(out: T): T;\n    toRgbArray<T extends (number[] | Float32Array)>(out?: T): T\n    {\n        out = out ?? [] as number[] as T;\n        const [r, g, b] = this._components;\n\n        out[0] = r;\n        out[1] = g;\n        out[2] = b;\n\n        return out;\n    }\n\n    /**\n     * Convert to a hexadecimal number.\n     * @example\n     * import { Color } from 'pixi.js';\n     * new Color('white').toNumber(); // returns 16777215\n     */\n    toNumber(): number\n    {\n        return this._int;\n    }\n\n    /**\n     * Convert to a hexadecimal number in little endian format (e.g., BBGGRR).\n     * @example\n     * import { Color } from 'pixi.js';\n     * new Color(0xffcc99).toLittleEndianNumber(); // returns 0x99ccff\n     * @returns {number} - The color as a number in little endian format.\n     */\n    toLittleEndianNumber(): number\n    {\n        const value = this._int;\n\n        return (value >> 16) + (value & 0xff00) + ((value & 0xff) << 16);\n    }\n\n    /**\n     * Multiply with another color. This action is destructive, and will\n     * override the previous `value` property to be `null`.\n     * @param {PIXI.ColorSource} value - The color to multiply by.\n     */\n    multiply(value: ColorSource): this\n    {\n        const [r, g, b, a] = Color.temp.setValue(value)._components;\n\n        this._components[0] *= r;\n        this._components[1] *= g;\n        this._components[2] *= b;\n        this._components[3] *= a;\n\n        this.refreshInt();\n        this._value = null;\n\n        return this;\n    }\n\n    /**\n     * Converts color to a premultiplied alpha format. This action is destructive, and will\n     * override the previous `value` property to be `null`.\n     * @param alpha - The alpha to multiply by.\n     * @param {boolean} [applyToRGB=true] - Whether to premultiply RGB channels.\n     * @returns {PIXI.Color} - Itself.\n     */\n    premultiply(alpha: number, applyToRGB = true): this\n    {\n        if (applyToRGB)\n        {\n            this._components[0] *= alpha;\n            this._components[1] *= alpha;\n            this._components[2] *= alpha;\n        }\n        this._components[3] = alpha;\n\n        this.refreshInt();\n        this._value = null;\n\n        return this;\n    }\n\n    /**\n     * Premultiplies alpha with current color.\n     * @param {number} alpha - The alpha to multiply by.\n     * @param {boolean} [applyToRGB=true] - Whether to premultiply RGB channels.\n     * @returns {number} tint multiplied by alpha\n     */\n    toPremultiplied(alpha: number, applyToRGB = true): number\n    {\n        if (alpha === 1.0)\n        {\n            return (0xFF << 24) + this._int;\n        }\n        if (alpha === 0.0)\n        {\n            return applyToRGB ? 0 : this._int;\n        }\n        let r = ((this._int >> 16) & 0xFF);\n        let g = ((this._int >> 8) & 0xFF);\n        let b = (this._int & 0xFF);\n\n        if (applyToRGB)\n        {\n            r = ((r * alpha) + 0.5) | 0;\n            g = ((g * alpha) + 0.5) | 0;\n            b = ((b * alpha) + 0.5) | 0;\n        }\n\n        return (alpha * 255 << 24) + (r << 16) + (g << 8) + b;\n    }\n\n    /**\n     * Convert to a hexidecimal string.\n     * @example\n     * import { Color } from 'pixi.js';\n     * new Color('white').toHex(); // returns \"#ffffff\"\n     */\n    toHex(): string\n    {\n        const hexString = this._int.toString(16);\n\n        return `#${'000000'.substring(0, 6 - hexString.length) + hexString}`;\n    }\n\n    /**\n     * Convert to a hexidecimal string with alpha.\n     * @example\n     * import { Color } from 'pixi.js';\n     * new Color('white').toHexa(); // returns \"#ffffffff\"\n     */\n    toHexa(): string\n    {\n        const alphaValue = Math.round(this._components[3] * 255);\n        const alphaString = alphaValue.toString(16);\n\n        return this.toHex() + '00'.substring(0, 2 - alphaString.length) + alphaString;\n    }\n\n    /**\n     * Set alpha, suitable for chaining.\n     * @param alpha\n     */\n    setAlpha(alpha: number): this\n    {\n        this._components[3] = this._clamp(alpha);\n\n        return this;\n    }\n\n    /**\n     * Rounds the specified color according to the step. This action is destructive, and will\n     * override the previous `value` property to be `null`. The alpha component is not rounded.\n     * @param steps - Number of steps which will be used as a cap when rounding colors\n     * @deprecated since 7.3.0\n     */\n    round(steps: number): this\n    {\n        const [r, g, b] = this._components;\n\n        this._components[0] = Math.round(r * steps) / steps;\n        this._components[1] = Math.round(g * steps) / steps;\n        this._components[2] = Math.round(b * steps) / steps;\n        this.refreshInt();\n        this._value = null;\n\n        return this;\n    }\n\n    /**\n     * Convert to an [R, G, B, A] array of normalized floats (numbers from 0.0 to 1.0).\n     * @example\n     * import { Color } from 'pixi.js';\n     * new Color('white').toArray(); // returns [1, 1, 1, 1]\n     * @param {number[]|Float32Array} [out] - Output array\n     */\n    toArray(): number[];\n    toArray<T extends (number[] | Float32Array)>(out: T): T;\n    toArray<T extends (number[] | Float32Array)>(out?: T): T\n    {\n        out = out ?? [] as number[] as T;\n        const [r, g, b, a] = this._components;\n\n        out[0] = r;\n        out[1] = g;\n        out[2] = b;\n        out[3] = a;\n\n        return out;\n    }\n\n    /**\n     * Normalize the input value into rgba\n     * @param value - Input value\n     */\n    private normalize(value: Exclude<ColorSource, Color>): void\n    {\n        let r: number | undefined;\n        let g: number | undefined;\n        let b: number | undefined;\n        let a: number | undefined;\n\n        // Number is a primative so typeof works fine, but in the case\n        // that someone creates a class that extends Number, we also\n        // need to check for instanceof Number\n        if ((typeof value === 'number' || value instanceof Number)\n            && (value as number) >= 0\n            && (value as number) <= 0xffffff)\n        {\n            const int = value as number; // cast required because instanceof Number is ambiguous for TS\n\n            r = ((int >> 16) & 0xFF) / 255;\n            g = ((int >> 8) & 0xFF) / 255;\n            b = (int & 0xFF) / 255;\n            a = 1.0;\n        }\n        else if ((Array.isArray(value) || value instanceof Float32Array)\n            // Can be rgb or rgba\n            && value.length >= 3 && value.length <= 4)\n        {\n            // make sure all values are 0 - 1\n            value = this._clamp(value);\n            [r, g, b, a = 1.0] = value;\n        }\n        else if ((value instanceof Uint8Array || value instanceof Uint8ClampedArray)\n            // Can be rgb or rgba\n            && value.length >= 3 && value.length <= 4)\n        {\n            // make sure all values are 0 - 255\n            value = this._clamp(value, 0, 255);\n            [r, g, b, a = 255] = value;\n            r /= 255;\n            g /= 255;\n            b /= 255;\n            a /= 255;\n        }\n        else if (typeof value === 'string' || typeof value === 'object')\n        {\n            if (typeof value === 'string')\n            {\n                const match = Color.HEX_PATTERN.exec(value);\n\n                if (match)\n                {\n                    // Normalize hex string, remove 0x or # prefix\n                    value = `#${match[2]}`;\n                }\n            }\n\n            const color = colord(value as AnyColor);\n\n            if (color.isValid())\n            {\n                ({ r, g, b, a } = color.rgba);\n                r /= 255;\n                g /= 255;\n                b /= 255;\n            }\n        }\n\n        // Cache normalized values for rgba and hex integer\n        if (r !== undefined)\n        {\n            this._components[0] = r as number;\n            this._components[1] = g as number;\n            this._components[2] = b as number;\n            this._components[3] = a as number;\n            this.refreshInt();\n        }\n        else\n        {\n            throw new Error(`Unable to convert color ${value}`);\n        }\n    }\n\n    /** Refresh the internal color rgb number */\n    private refreshInt(): void\n    {\n        // Clamp values to 0 - 1\n        this._clamp(this._components);\n\n        const [r, g, b] = this._components;\n\n        this._int = (((r * 255) << 16) + ((g * 255) << 8) + (b * 255 | 0));\n    }\n\n    /**\n     * Clamps values to a range. Will override original values\n     * @param value - Value(s) to clamp\n     * @param min - Minimum value\n     * @param max - Maximum value\n     */\n    private _clamp<T extends number | number[] | ColorSourceTypedArray>(value: T, min = 0, max = 1): T\n    {\n        if (typeof value === 'number')\n        {\n            return Math.min(Math.max(value, min), max) as T;\n        }\n\n        value.forEach((v, i) =>\n        {\n            value[i] = Math.min(Math.max(v, min), max);\n        });\n\n        return value;\n    }\n}\n"],"names":["_Color"],"mappings":"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"}