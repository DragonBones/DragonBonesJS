{"version":3,"file":"Extract.js","sources":["../src/Extract.ts"],"sourcesContent":["import { extensions, ExtensionType, FORMATS, Rectangle, RenderTexture, utils } from '@pixi/core';\n\nimport type { ExtensionMetadata, ICanvas, ISystem, Renderer } from '@pixi/core';\nimport type { DisplayObject } from '@pixi/display';\n\nconst TEMP_RECT = new Rectangle();\nconst BYTES_PER_PIXEL = 4;\n\nexport interface IExtract\n{\n    image(target?: DisplayObject | RenderTexture, format?: string, quality?: number,\n        frame?: Rectangle): Promise<HTMLImageElement>;\n    base64(target?: DisplayObject | RenderTexture, format?: string, quality?: number,\n        frame?: Rectangle): Promise<string>;\n    canvas(target?: DisplayObject | RenderTexture, frame?: Rectangle): ICanvas;\n    pixels(target?: DisplayObject | RenderTexture, frame?: Rectangle): Uint8Array | Uint8ClampedArray;\n}\n\n/**\n * This class provides renderer-specific plugins for exporting content from a renderer.\n * For instance, these plugins can be used for saving an Image, Canvas element or for exporting the raw image data (pixels).\n *\n * Do not instantiate these plugins directly. It is available from the `renderer.extract` property.\n * @example\n * import { Application, Graphics } from 'pixi.js';\n *\n * // Create a new application (extract will be auto-added to renderer)\n * const app = new Application();\n *\n * // Draw a red circle\n * const graphics = new Graphics()\n *     .beginFill(0xFF0000)\n *     .drawCircle(0, 0, 50);\n *\n * // Render the graphics as an HTMLImageElement\n * const image = await app.renderer.extract.image(graphics);\n * document.body.appendChild(image);\n * @memberof PIXI\n */\n\nexport class Extract implements ISystem, IExtract\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        name: 'extract',\n        type: ExtensionType.RendererSystem,\n    };\n\n    private renderer: Renderer | null;\n\n    /** Does the renderer have alpha and are its color channels stored premultipled by the alpha channel? */\n    private _rendererPremultipliedAlpha: boolean;\n\n    /**\n     * @param renderer - A reference to the current renderer\n     */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n        this._rendererPremultipliedAlpha = false;\n    }\n\n    protected contextChange(): void\n    {\n        const attributes = this.renderer?.gl.getContextAttributes();\n\n        this._rendererPremultipliedAlpha = !!(attributes && attributes.alpha && attributes.premultipliedAlpha);\n    }\n\n    /**\n     * Will return a HTML Image of the target\n     * @param target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param format - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n     * @param quality - JPEG or Webp compression from 0 to 1. Default is 0.92.\n     * @param frame - The frame the extraction is restricted to.\n     * @returns - HTML Image of the target\n     */\n    public async image(target?: DisplayObject | RenderTexture, format?: string, quality?: number,\n        frame?: Rectangle): Promise<HTMLImageElement>\n    {\n        const image = new Image();\n\n        image.src = await this.base64(target, format, quality, frame);\n\n        return image;\n    }\n\n    /**\n     * Will return a base64 encoded string of this target. It works by calling\n     *  `Extract.canvas` and then running toDataURL on that.\n     * @param target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param format - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n     * @param quality - JPEG or Webp compression from 0 to 1. Default is 0.92.\n     * @param frame - The frame the extraction is restricted to.\n     * @returns - A base64 encoded string of the texture.\n     */\n    public async base64(target?: DisplayObject | RenderTexture, format?: string, quality?: number,\n        frame?: Rectangle): Promise<string>\n    {\n        const canvas = this.canvas(target, frame);\n\n        if (canvas.toBlob !== undefined)\n        {\n            return new Promise<string>((resolve, reject) =>\n            {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                canvas.toBlob!((blob) =>\n                {\n                    if (!blob)\n                    {\n                        reject(new Error('ICanvas.toBlob failed!'));\n\n                        return;\n                    }\n\n                    const reader = new FileReader();\n\n                    reader.onload = () => resolve(reader.result as string);\n                    reader.onerror = reject;\n                    reader.readAsDataURL(blob);\n                }, format, quality);\n            });\n        }\n        if (canvas.toDataURL !== undefined)\n        {\n            return canvas.toDataURL(format, quality);\n        }\n        if (canvas.convertToBlob !== undefined)\n        {\n            const blob = await canvas.convertToBlob({ type: format, quality });\n\n            return new Promise<string>((resolve, reject) =>\n            {\n                const reader = new FileReader();\n\n                reader.onload = () => resolve(reader.result as string);\n                reader.onerror = reject;\n                reader.readAsDataURL(blob);\n            });\n        }\n\n        throw new Error('Extract.base64() requires ICanvas.toDataURL, ICanvas.toBlob, '\n            + 'or ICanvas.convertToBlob to be implemented');\n    }\n\n    /**\n     * Creates a Canvas element, renders this target to it and then returns it.\n     * @param target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param frame - The frame the extraction is restricted to.\n     * @returns - A Canvas element with the texture rendered on.\n     */\n    public canvas(target?: DisplayObject | RenderTexture, frame?: Rectangle): ICanvas\n    {\n        const { pixels, width, height, flipY, premultipliedAlpha } = this._rawPixels(target, frame);\n\n        // Flipping pixels\n        if (flipY)\n        {\n            Extract._flipY(pixels, width, height);\n        }\n\n        if (premultipliedAlpha)\n        {\n            Extract._unpremultiplyAlpha(pixels);\n        }\n\n        const canvasBuffer = new utils.CanvasRenderTarget(width, height, 1);\n\n        // Add the pixels to the canvas\n        const imageData = new ImageData(new Uint8ClampedArray(pixels.buffer), width, height);\n\n        canvasBuffer.context.putImageData(imageData, 0, 0);\n\n        // Send the canvas back\n        return canvasBuffer.canvas;\n    }\n\n    /**\n     * Will return a one-dimensional array containing the pixel data of the entire texture in RGBA\n     * order, with integer values between 0 and 255 (included).\n     * @param target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param frame - The frame the extraction is restricted to.\n     * @returns - One-dimensional array containing the pixel data of the entire texture\n     */\n    public pixels(target?: DisplayObject | RenderTexture, frame?: Rectangle): Uint8Array\n    {\n        const { pixels, width, height, flipY, premultipliedAlpha } = this._rawPixels(target, frame);\n\n        if (flipY)\n        {\n            Extract._flipY(pixels, width, height);\n        }\n\n        if (premultipliedAlpha)\n        {\n            Extract._unpremultiplyAlpha(pixels);\n        }\n\n        return pixels;\n    }\n\n    private _rawPixels(target?: DisplayObject | RenderTexture, frame?: Rectangle): {\n        pixels: Uint8Array, width: number, height: number, flipY: boolean, premultipliedAlpha: boolean\n    }\n    {\n        const renderer = this.renderer;\n\n        if (!renderer)\n        {\n            throw new Error('The Extract has already been destroyed');\n        }\n\n        let resolution;\n        let flipY = false;\n        let premultipliedAlpha = false;\n        let renderTexture;\n        let generated = false;\n\n        if (target)\n        {\n            if (target instanceof RenderTexture)\n            {\n                renderTexture = target;\n            }\n            else\n            {\n                renderTexture = renderer.generateTexture(target, {\n                    region: frame,\n                    resolution: renderer.resolution,\n                    multisample: renderer.multisample\n                });\n                generated = true;\n\n                if (frame)\n                {\n                    TEMP_RECT.width = frame.width;\n                    TEMP_RECT.height = frame.height;\n                    frame = TEMP_RECT;\n                }\n            }\n        }\n\n        const gl = renderer.gl;\n\n        if (renderTexture)\n        {\n            resolution = renderTexture.baseTexture.resolution;\n            frame = frame ?? renderTexture.frame;\n            flipY = false;\n            premultipliedAlpha = renderTexture.baseTexture.alphaMode > 0\n                && renderTexture.baseTexture.format === FORMATS.RGBA;\n\n            if (!generated)\n            {\n                renderer.renderTexture.bind(renderTexture);\n\n                const fbo = renderTexture.framebuffer.glFramebuffers[renderer.CONTEXT_UID];\n\n                if (fbo.blitFramebuffer)\n                {\n                    renderer.framebuffer.bind(fbo.blitFramebuffer);\n                }\n            }\n        }\n        else\n        {\n            resolution = renderer.resolution;\n\n            if (!frame)\n            {\n                frame = TEMP_RECT;\n                frame.width = renderer.width / resolution;\n                frame.height = renderer.height / resolution;\n            }\n\n            flipY = true;\n            premultipliedAlpha = this._rendererPremultipliedAlpha;\n            renderer.renderTexture.bind();\n        }\n\n        const width = Math.max(Math.round(frame.width * resolution), 1);\n        const height = Math.max(Math.round(frame.height * resolution), 1);\n\n        const pixels = new Uint8Array(BYTES_PER_PIXEL * width * height);\n\n        // Read pixels to the array\n        gl.readPixels(\n            Math.round(frame.x * resolution),\n            Math.round(frame.y * resolution),\n            width,\n            height,\n            gl.RGBA,\n            gl.UNSIGNED_BYTE,\n            pixels\n        );\n\n        if (generated)\n        {\n            renderTexture?.destroy(true);\n        }\n\n        return { pixels, width, height, flipY, premultipliedAlpha };\n    }\n\n    /** Destroys the extract. */\n    public destroy(): void\n    {\n        this.renderer = null;\n    }\n\n    private static _flipY(pixels: Uint8Array | Uint8ClampedArray, width: number, height: number): void\n    {\n        const w = width << 2;\n        const h = height >> 1;\n        const temp = new Uint8Array(w);\n\n        for (let y = 0; y < h; y++)\n        {\n            const t = y * w;\n            const b = (height - y - 1) * w;\n\n            temp.set(pixels.subarray(t, t + w));\n            pixels.copyWithin(t, b, b + w);\n            pixels.set(temp, b);\n        }\n    }\n\n    private static _unpremultiplyAlpha(pixels: Uint8Array | Uint8ClampedArray): void\n    {\n        if (pixels instanceof Uint8ClampedArray)\n        {\n            pixels = new Uint8Array(pixels.buffer);\n        }\n\n        const n = pixels.length;\n\n        for (let i = 0; i < n; i += 4)\n        {\n            const alpha = pixels[i + 3];\n\n            if (alpha !== 0)\n            {\n                const a = 255.001 / alpha;\n\n                pixels[i] = (pixels[i] * a) + 0.5;\n                pixels[i + 1] = (pixels[i + 1] * a) + 0.5;\n                pixels[i + 2] = (pixels[i + 2] * a) + 0.5;\n            }\n        }\n    }\n}\n\nextensions.add(Extract);\n"],"names":["Rectangle","_Extract","utils","RenderTexture","FORMATS","ExtensionType","extensions"],"mappings":"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"}