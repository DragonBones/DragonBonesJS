{"version":3,"file":"ArcUtils.js","sources":["../../src/utils/ArcUtils.ts"],"sourcesContent":["import { PI_2 } from '@pixi/core';\nimport { curves } from '../const';\n\ninterface IArcLikeShape\n{\n    cx: number;\n    cy: number;\n    radius: number;\n    startAngle: number;\n    endAngle: number;\n    anticlockwise: boolean;\n}\n\n/**\n * Utilities for arc curves.\n * @private\n */\nexport class ArcUtils\n{\n    /**\n     * Calculate information of the arc for {@link PIXI.Graphics.arcTo}.\n     * @private\n     * @param x1 - The x-coordinate of the first control point of the arc\n     * @param y1 - The y-coordinate of the first control point of the arc\n     * @param x2 - The x-coordinate of the second control point of the arc\n     * @param y2 - The y-coordinate of the second control point of the arc\n     * @param radius - The radius of the arc\n     * @param points - Collection of points to add to\n     * @returns - If the arc length is valid, return center of circle, radius and other info otherwise `null`.\n     */\n    static curveTo(x1: number, y1: number, x2: number, y2: number, radius: number, points: Array<number>): IArcLikeShape\n    {\n        const fromX = points[points.length - 2];\n        const fromY = points[points.length - 1];\n\n        const a1 = fromY - y1;\n        const b1 = fromX - x1;\n        const a2 = y2 - y1;\n        const b2 = x2 - x1;\n        const mm = Math.abs((a1 * b2) - (b1 * a2));\n\n        if (mm < 1.0e-8 || radius === 0)\n        {\n            if (points[points.length - 2] !== x1 || points[points.length - 1] !== y1)\n            {\n                points.push(x1, y1);\n            }\n\n            return null;\n        }\n\n        const dd = (a1 * a1) + (b1 * b1);\n        const cc = (a2 * a2) + (b2 * b2);\n        const tt = (a1 * a2) + (b1 * b2);\n        const k1 = radius * Math.sqrt(dd) / mm;\n        const k2 = radius * Math.sqrt(cc) / mm;\n        const j1 = k1 * tt / dd;\n        const j2 = k2 * tt / cc;\n        const cx = (k1 * b2) + (k2 * b1);\n        const cy = (k1 * a2) + (k2 * a1);\n        const px = b1 * (k2 + j1);\n        const py = a1 * (k2 + j1);\n        const qx = b2 * (k1 + j2);\n        const qy = a2 * (k1 + j2);\n        const startAngle = Math.atan2(py - cy, px - cx);\n        const endAngle = Math.atan2(qy - cy, qx - cx);\n\n        return {\n            cx: (cx + x1),\n            cy: (cy + y1),\n            radius,\n            startAngle,\n            endAngle,\n            anticlockwise: (b1 * a2 > b2 * a1),\n        };\n    }\n\n    /**\n     * The arc method creates an arc/curve (used to create circles, or parts of circles).\n     * @private\n     * @param _startX - Start x location of arc\n     * @param _startY - Start y location of arc\n     * @param cx - The x-coordinate of the center of the circle\n     * @param cy - The y-coordinate of the center of the circle\n     * @param radius - The radius of the circle\n     * @param startAngle - The starting angle, in radians (0 is at the 3 o'clock position\n     *  of the arc's circle)\n     * @param endAngle - The ending angle, in radians\n     * @param _anticlockwise - Specifies whether the drawing should be\n     *  counter-clockwise or clockwise. False is default, and indicates clockwise, while true\n     *  indicates counter-clockwise.\n     * @param points - Collection of points to add to\n     */\n    static arc(_startX: number, _startY: number, cx: number, cy: number, radius: number,\n        startAngle: number, endAngle: number, _anticlockwise: boolean, points: Array<number>): void\n    {\n        const sweep = endAngle - startAngle;\n        const n = curves._segmentsCount(\n            Math.abs(sweep) * radius,\n            Math.ceil(Math.abs(sweep) / PI_2) * 40\n        );\n\n        const theta = (sweep) / (n * 2);\n        const theta2 = theta * 2;\n        const cTheta = Math.cos(theta);\n        const sTheta = Math.sin(theta);\n        const segMinus = n - 1;\n        const remainder = (segMinus % 1) / segMinus;\n\n        for (let i = 0; i <= segMinus; ++i)\n        {\n            const real = i + (remainder * i);\n            const angle = ((theta) + startAngle + (theta2 * real));\n            const c = Math.cos(angle);\n            const s = -Math.sin(angle);\n\n            points.push(\n                (((cTheta * c) + (sTheta * s)) * radius) + cx,\n                (((cTheta * -s) + (sTheta * c)) * radius) + cy\n            );\n        }\n    }\n}\n"],"names":["curves","PI_2"],"mappings":";;AAiBO,MAAM,SACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYI,OAAO,QAAQ,IAAY,IAAY,IAAY,IAAY,QAAgB,QAC/E;AACI,UAAM,QAAQ,OAAO,OAAO,SAAS,CAAC,GAGhC,KAFQ,OAAO,OAAO,SAAS,CAAC,IAEnB,IACb,KAAK,QAAQ,IACb,KAAK,KAAK,IACV,KAAK,KAAK,IACV,KAAK,KAAK,IAAK,KAAK,KAAO,KAAK,EAAG;AAErC,QAAA,KAAK,QAAU,WAAW;AAE1B,cAAI,OAAO,OAAO,SAAS,CAAC,MAAM,MAAM,OAAO,OAAO,SAAS,CAAC,MAAM,OAElE,OAAO,KAAK,IAAI,EAAE,GAGf;AAGX,UAAM,KAAM,KAAK,KAAO,KAAK,IACvB,KAAM,KAAK,KAAO,KAAK,IACvB,KAAM,KAAK,KAAO,KAAK,IACvB,KAAK,SAAS,KAAK,KAAK,EAAE,IAAI,IAC9B,KAAK,SAAS,KAAK,KAAK,EAAE,IAAI,IAC9B,KAAK,KAAK,KAAK,IACf,KAAK,KAAK,KAAK,IACf,KAAM,KAAK,KAAO,KAAK,IACvB,KAAM,KAAK,KAAO,KAAK,IACvB,KAAK,MAAM,KAAK,KAChB,KAAK,MAAM,KAAK,KAChB,KAAK,MAAM,KAAK,KAChB,KAAK,MAAM,KAAK,KAChB,aAAa,KAAK,MAAM,KAAK,IAAI,KAAK,EAAE,GACxC,WAAW,KAAK,MAAM,KAAK,IAAI,KAAK,EAAE;AAErC,WAAA;AAAA,MACH,IAAK,KAAK;AAAA,MACV,IAAK,KAAK;AAAA,MACV;AAAA,MACA;AAAA,MACA;AAAA,MACA,eAAgB,KAAK,KAAK,KAAK;AAAA,IAAA;AAAA,EAEvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkBA,OAAO,IAAI,SAAiB,SAAiB,IAAY,IAAY,QACjE,YAAoB,UAAkB,gBAAyB,QACnE;AACI,UAAM,QAAQ,WAAW,YACnB,IAAIA,OAAO,OAAA;AAAA,MACb,KAAK,IAAI,KAAK,IAAI;AAAA,MAClB,KAAK,KAAK,KAAK,IAAI,KAAK,IAAIC,KAAI,IAAA,IAAI;AAAA,IACxC,GAEM,QAAS,SAAU,IAAI,IACvB,SAAS,QAAQ,GACjB,SAAS,KAAK,IAAI,KAAK,GACvB,SAAS,KAAK,IAAI,KAAK,GACvB,WAAW,IAAI,GACf,YAAa,WAAW,IAAK;AAEnC,aAAS,IAAI,GAAG,KAAK,UAAU,EAAE,GACjC;AACI,YAAM,OAAO,IAAK,YAAY,GACxB,QAAU,QAAS,aAAc,SAAS,MAC1C,IAAI,KAAK,IAAI,KAAK,GAClB,IAAI,CAAC,KAAK,IAAI,KAAK;AAElB,aAAA;AAAA,SACA,SAAS,IAAM,SAAS,KAAM,SAAU;AAAA,SACxC,SAAS,CAAC,IAAM,SAAS,KAAM,SAAU;AAAA,MAAA;AAAA,IAEpD;AAAA,EACJ;AACJ;;"}